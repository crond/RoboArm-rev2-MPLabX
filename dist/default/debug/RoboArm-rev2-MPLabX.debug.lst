

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Jul 28 21:48:58 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31  0000                     
    32                           ; Version 1.42
    33                           ; Generated 13/04/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4431 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  000BDC                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _ch
    72  000BDC  7A                 	db	122
    73                           
    74                           ;initializer for Load_Base@value
    75  000BDD  05                 	db	5
    76                           
    77                           ;initializer for Load_Base@direction
    78  000BDE  01                 	db	1
    79                           
    80                           	psect	smallconst
    81  000300                     __psmallconst:
    82                           	opt stack 0
    83  000300  00                 	db	0
    84  000301                     _dpowers:
    85                           	opt stack 0
    86  000301  0001               	dw	1
    87  000303  000A               	dw	10
    88  000305  0064               	dw	100
    89  000307  03E8               	dw	1000
    90  000309  2710               	dw	10000
    91  00030B                     __end_of_dpowers:
    92                           	opt stack 0
    93  00030B                     _hexpowers:
    94                           	opt stack 0
    95  00030B  0001               	dw	1
    96  00030D  0010               	dw	16
    97  00030F  0100               	dw	256
    98  000311  1000               	dw	4096
    99  000313                     __end_of_hexpowers:
   100                           	opt stack 0
   101  0000                     _PORTAbits	set	3968
   102  0000                     _PTCON1	set	3966
   103  0000                     _PTMRH	set	3964
   104  0000                     _PTMRL	set	3965
   105  0000                     _PTPERH	set	3962
   106  0000                     _PTPERL	set	3963
   107  0000                     _PTCON0	set	3967
   108  0000                     _PWMCON0	set	3951
   109  0000                     _TRISD	set	3989
   110  0000                     _TRISC	set	3988
   111  0000                     _TRISB	set	3987
   112  0000                     _TRISA	set	3986
   113  0000                     _TRISC7	set	31911
   114  0000                     _TRISC6	set	31910
   115  0000                     _EECON2	set	4007
   116  0000                     _EEDATA	set	4008
   117  0000                     _EECON1bits	set	4006
   118  0000                     _EEADR	set	4009
   119  0000                     _RCREG	set	4014
   120  0000                     _TXREG	set	4013
   121  0000                     _RCSTA	set	4011
   122  0000                     _TXSTA	set	4012
   123  0000                     _SPBRG	set	4015
   124  0000                     _BAUDCTL	set	4010
   125  0000                     _T2CON	set	4042
   126  0000                     _PR2	set	4043
   127  0000                     _OSCCON	set	4051
   128  0000                     _CCP2CON	set	4026
   129  0000                     _CCPR2L	set	4027
   130  0000                     _CFGS	set	32054
   131  0000                     _EEPGD	set	32055
   132  0000                     _RCIF	set	31989
   133  0000                     _TXIF	set	31988
   134  0000                     _BRG16	set	32083
   135  0000                     _INTCONbits	set	4082
   136  000313                     STR_1:
   137  000313  63                 	db	99	;'c'
   138  000314  68                 	db	104	;'h'
   139  000315  61                 	db	97	;'a'
   140  000316  6E                 	db	110	;'n'
   141  000317  67                 	db	103	;'g'
   142  000318  65                 	db	101	;'e'
   143  000319  20                 	db	32
   144  00031A  74                 	db	116	;'t'
   145  00031B  6F                 	db	111	;'o'
   146  00031C  20                 	db	32
   147  00031D  64                 	db	100	;'d'
   148  00031E  65                 	db	101	;'e'
   149  00031F  66                 	db	102	;'f'
   150  000320  61                 	db	97	;'a'
   151  000321  75                 	db	117	;'u'
   152  000322  6C                 	db	108	;'l'
   153  000323  74                 	db	116	;'t'
   154  000324  20                 	db	32
   155  000325  6D                 	db	109	;'m'
   156  000326  6F                 	db	111	;'o'
   157  000327  64                 	db	100	;'d'
   158  000328  65                 	db	101	;'e'
   159  000329  00                 	db	0
   160  00032A                     STR_6:
   161  00032A  47                 	db	71	;'G'
   162  00032B  6F                 	db	111	;'o'
   163  00032C  69                 	db	105	;'i'
   164  00032D  6E                 	db	110	;'n'
   165  00032E  67                 	db	103	;'g'
   166  00032F  20                 	db	32
   167  000330  74                 	db	116	;'t'
   168  000331  6F                 	db	111	;'o'
   169  000332  20                 	db	32
   170  000333  44                 	db	68	;'D'
   171  000334  65                 	db	101	;'e'
   172  000335  66                 	db	102	;'f'
   173  000336  61                 	db	97	;'a'
   174  000337  75                 	db	117	;'u'
   175  000338  6C                 	db	108	;'l'
   176  000339  74                 	db	116	;'t'
   177  00033A  20                 	db	32
   178  00033B  4D                 	db	77	;'M'
   179  00033C  6F                 	db	111	;'o'
   180  00033D  64                 	db	100	;'d'
   181  00033E  65                 	db	101	;'e'
   182  00033F  00                 	db	0
   183  000340                     STR_4:
   184  000340  65                 	db	101	;'e'
   185  000341  6E                 	db	110	;'n'
   186  000342  74                 	db	116	;'t'
   187  000343  65                 	db	101	;'e'
   188  000344  72                 	db	114	;'r'
   189  000345  69                 	db	105	;'i'
   190  000346  6E                 	db	110	;'n'
   191  000347  67                 	db	103	;'g'
   192  000348  20                 	db	32
   193  000349  74                 	db	116	;'t'
   194  00034A  65                 	db	101	;'e'
   195  00034B  73                 	db	115	;'s'
   196  00034C  74                 	db	116	;'t'
   197  00034D  20                 	db	32
   198  00034E  6D                 	db	109	;'m'
   199  00034F  6F                 	db	111	;'o'
   200  000350  64                 	db	100	;'d'
   201  000351  65                 	db	101	;'e'
   202  000352  00                 	db	0
   203  000353                     STR_5:
   204  000353  65                 	db	101	;'e'
   205  000354  6E                 	db	110	;'n'
   206  000355  74                 	db	116	;'t'
   207  000356  65                 	db	101	;'e'
   208  000357  72                 	db	114	;'r'
   209  000358  69                 	db	105	;'i'
   210  000359  6E                 	db	110	;'n'
   211  00035A  67                 	db	103	;'g'
   212  00035B  20                 	db	32
   213  00035C  73                 	db	115	;'s'
   214  00035D  65                 	db	101	;'e'
   215  00035E  74                 	db	116	;'t'
   216  00035F  20                 	db	32
   217  000360  6D                 	db	109	;'m'
   218  000361  6F                 	db	111	;'o'
   219  000362  64                 	db	100	;'d'
   220  000363  65                 	db	101	;'e'
   221  000364  00                 	db	0
   222  000365                     STR_14:
   223  000365  30                 	db	48	;'0'
   224  000366  31                 	db	49	;'1'
   225  000367  32                 	db	50	;'2'
   226  000368  33                 	db	51	;'3'
   227  000369  34                 	db	52	;'4'
   228  00036A  35                 	db	53	;'5'
   229  00036B  36                 	db	54	;'6'
   230  00036C  37                 	db	55	;'7'
   231  00036D  38                 	db	56	;'8'
   232  00036E  39                 	db	57	;'9'
   233  00036F  61                 	db	97	;'a'
   234  000370  62                 	db	98	;'b'
   235  000371  63                 	db	99	;'c'
   236  000372  64                 	db	100	;'d'
   237  000373  65                 	db	101	;'e'
   238  000374  66                 	db	102	;'f'
   239  000375  00                 	db	0
   240  000376                     STR_10:
   241  000376  72                 	db	114	;'r'
   242  000377  65                 	db	101	;'e'
   243  000378  61                 	db	97	;'a'
   244  000379  64                 	db	100	;'d'
   245  00037A  69                 	db	105	;'i'
   246  00037B  6E                 	db	110	;'n'
   247  00037C  67                 	db	103	;'g'
   248  00037D  20                 	db	32
   249  00037E  76                 	db	118	;'v'
   250  00037F  61                 	db	97	;'a'
   251  000380  6C                 	db	108	;'l'
   252  000381  75                 	db	117	;'u'
   253  000382  65                 	db	101	;'e'
   254  000383  73                 	db	115	;'s'
   255  000384  0A                 	db	10
   256  000385  00                 	db	0
   257  000386                     STR_7:
   258  000386  45                 	db	69	;'E'
   259  000387  6E                 	db	110	;'n'
   260  000388  74                 	db	116	;'t'
   261  000389  65                 	db	101	;'e'
   262  00038A  72                 	db	114	;'r'
   263  00038B  20                 	db	32
   264  00038C  50                 	db	80	;'P'
   265  00038D  57                 	db	87	;'W'
   266  00038E  4D                 	db	77	;'M'
   267  00038F  20                 	db	32
   268  000390  56                 	db	86	;'V'
   269  000391  61                 	db	97	;'a'
   270  000392  6C                 	db	108	;'l'
   271  000393  75                 	db	117	;'u'
   272  000394  65                 	db	101	;'e'
   273  000395  00                 	db	0
   274  000396                     STR_9:
   275  000396  77                 	db	119	;'w'
   276  000397  72                 	db	114	;'r'
   277  000398  69                 	db	105	;'i'
   278  000399  74                 	db	116	;'t'
   279  00039A  69                 	db	105	;'i'
   280  00039B  6E                 	db	110	;'n'
   281  00039C  67                 	db	103	;'g'
   282  00039D  20                 	db	32
   283  00039E  76                 	db	118	;'v'
   284  00039F  61                 	db	97	;'a'
   285  0003A0  6C                 	db	108	;'l'
   286  0003A1  75                 	db	117	;'u'
   287  0003A2  65                 	db	101	;'e'
   288  0003A3  73                 	db	115	;'s'
   289  0003A4  00                 	db	0
   290  0003A5                     STR_2:
   291  0003A5  49                 	db	73	;'I'
   292  0003A6  6E                 	db	110	;'n'
   293  0003A7  76                 	db	118	;'v'
   294  0003A8  61                 	db	97	;'a'
   295  0003A9  6C                 	db	108	;'l'
   296  0003AA  69                 	db	105	;'i'
   297  0003AB  64                 	db	100	;'d'
   298  0003AC  20                 	db	32
   299  0003AD  64                 	db	100	;'d'
   300  0003AE  61                 	db	97	;'a'
   301  0003AF  74                 	db	116	;'t'
   302  0003B0  61                 	db	97	;'a'
   303  0003B1  2E                 	db	46
   304  0003B2  00                 	db	0
   305  0003B3                     STR_13:
   306  0003B3  72                 	db	114	;'r'
   307  0003B4  65                 	db	101	;'e'
   308  0003B5  61                 	db	97	;'a'
   309  0003B6  64                 	db	100	;'d'
   310  0003B7  69                 	db	105	;'i'
   311  0003B8  6E                 	db	110	;'n'
   312  0003B9  67                 	db	103	;'g'
   313  0003BA  20                 	db	32
   314  0003BB  64                 	db	100	;'d'
   315  0003BC  6F                 	db	111	;'o'
   316  0003BD  6E                 	db	110	;'n'
   317  0003BE  65                 	db	101	;'e'
   318  0003BF  00                 	db	0
   319  0003C0                     STR_8:
   320  0003C0  62                 	db	98	;'b'
   321  0003C1  3A                 	db	58	;':'
   322  0003C2  25                 	db	37
   323  0003C3  64                 	db	100	;'d'
   324  0003C4  00                 	db	0
   325  0003C5                     STR_11:
   326  0003C5  25                 	db	37
   327  0003C6  78                 	db	120	;'x'
   328  0003C7  00                 	db	0
   329  0000                     
   330                           ; #config settings
   331  0003C8  00                 	db	0	; dummy byte at the end
   332  0000                     
   333                           	psect	cinit
   334  000ACE                     __pcinit:
   335                           	opt stack 0
   336  000ACE                     start_initialization:
   337                           	opt stack 0
   338  000ACE                     __initialization:
   339                           	opt stack 0
   340                           
   341                           ; Initialize objects allocated to COMRAM (3 bytes)
   342                           ; load TBLPTR registers with __pidataCOMRAM
   343  000ACE  0EDC               	movlw	low __pidataCOMRAM
   344  000AD0  6EF6               	movwf	tblptrl,c
   345  000AD2  0E0B               	movlw	high __pidataCOMRAM
   346  000AD4  6EF7               	movwf	tblptrh,c
   347  000AD6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   348  000AD8  6EF8               	movwf	tblptru,c
   349  000ADA  0009               	tblrd		*+	;fetch initializer
   350  000ADC  CFF5 F036          	movff	tablat,__pdataCOMRAM
   351  000AE0  0009               	tblrd		*+	;fetch initializer
   352  000AE2  CFF5 F037          	movff	tablat,__pdataCOMRAM+1
   353  000AE6  0009               	tblrd		*+	;fetch initializer
   354  000AE8  CFF5 F038          	movff	tablat,__pdataCOMRAM+2
   355                           
   356                           ; Clear objects allocated to COMRAM (22 bytes)
   357  000AEC  EE00  F020         	lfsr	0,__pbssCOMRAM
   358  000AF0  0E16               	movlw	22
   359  000AF2                     clear_0:
   360  000AF2  6AEE               	clrf	postinc0,c
   361  000AF4  06E8               	decf	wreg,f,c
   362  000AF6  E1FD               	bnz	clear_0
   363  000AF8                     end_of_initialization:
   364                           	opt stack 0
   365  000AF8                     __end_of__initialization:
   366                           	opt stack 0
   367  000AF8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   368  000AFA  6EF8               	movwf	tblptru,c
   369  000AFC  0100               	movlb	0
   370  000AFE  EF2C  F004         	goto	_main	;jump to C main() function
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           
   378                           	psect	bssCOMRAM
   379  000020                     __pbssCOMRAM:
   380                           	opt stack 0
   381  000020                     _readByte:
   382                           	opt stack 0
   383  000020                     	ds	2
   384  000022                     _recvIdx:
   385                           	opt stack 0
   386  000022                     	ds	2
   387  000024                     _ptr:
   388                           	opt stack 0
   389  000024                     	ds	2
   390  000026                     _ch2:
   391                           	opt stack 0
   392  000026                     	ds	1
   393  000027                     state_machine@flag:
   394                           	opt stack 0
   395  000027                     	ds	1
   396  000028                     _state:
   397                           	opt stack 0
   398  000028                     	ds	1
   399  000029                     _prevState:
   400                           	opt stack 0
   401  000029                     	ds	1
   402  00002A                     _currState:
   403                           	opt stack 0
   404  00002A                     	ds	1
   405  00002B                     	ds	1
   406  00002C                     _uartBuffer:
   407                           	opt stack 0
   408  00002C                     	ds	8
   409  000034                     _testPWMValue:
   410                           	opt stack 0
   411  000034                     	ds	2
   412                           tblptru	equ	0xFF8
   413                           tblptrh	equ	0xFF7
   414                           tblptrl	equ	0xFF6
   415                           tablat	equ	0xFF5
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           
   419                           	psect	dataCOMRAM
   420  000036                     __pdataCOMRAM:
   421                           	opt stack 0
   422  000036                     _ch:
   423                           	opt stack 0
   424  000036                     	ds	1
   425  000037                     Load_Base@value:
   426                           	opt stack 0
   427  000037                     	ds	1
   428  000038                     Load_Base@direction:
   429                           	opt stack 0
   430  000038                     	ds	1
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           
   438                           	psect	cstackCOMRAM
   439  000001                     __pcstackCOMRAM:
   440                           	opt stack 0
   441  000001                     ?_strlen:
   442                           	opt stack 0
   443  000001                     ?___lwdiv:
   444                           	opt stack 0
   445  000001                     eusart_init@tx_mode:
   446                           	opt stack 0
   447  000001                     eeprom_read_custom@badd:
   448                           	opt stack 0
   449  000001                     delay@count:
   450                           	opt stack 0
   451  000001                     eeprom_write_custom@data:
   452                           	opt stack 0
   453  000001                     ___lwdiv@dividend:
   454                           	opt stack 0
   455  000001                     memcpy@d1:
   456                           	opt stack 0
   457  000001                     strlen@s:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x0
   461  000001                     	ds	1
   462  000002                     eusart_init@fosc:
   463                           	opt stack 0
   464                           
   465                           ; 4 bytes @ 0x1
   466  000002                     	ds	1
   467  000003                     ??_strlen:
   468  000003                     ??_delay:
   469  000003                     eeprom_write_custom@badd:
   470                           	opt stack 0
   471  000003                     ___lwdiv@divisor:
   472                           	opt stack 0
   473  000003                     memcpy@s1:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x2
   477  000003                     	ds	1
   478  000004                     delay@i:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x3
   482  000004                     	ds	1
   483  000005                     ___lwdiv@quotient:
   484                           	opt stack 0
   485  000005                     memcpy@n:
   486                           	opt stack 0
   487  000005                     strlen@cp:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x4
   491  000005                     	ds	1
   492  000006                     uart_send_byte@byte:
   493                           	opt stack 0
   494  000006                     eusart_init@baud:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x5
   498  000006                     	ds	1
   499  000007                     ___lwdiv@counter:
   500                           	opt stack 0
   501  000007                     debug@str:
   502                           	opt stack 0
   503  000007                     memcpy@d:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x6
   507  000007                     	ds	1
   508  000008                     ?___lwmod:
   509                           	opt stack 0
   510  000008                     eusart_init@usart_mode:
   511                           	opt stack 0
   512  000008                     ___lwmod@dividend:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x7
   516  000008                     	ds	1
   517  000009                     ??_debug:
   518  000009                     memcpy@s:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x8
   522  000009                     	ds	1
   523  00000A                     ___lwmod@divisor:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x9
   527  00000A                     	ds	1
   528  00000B                     memcpy@tmp:
   529                           	opt stack 0
   530  00000B                     debug@len:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0xA
   534  00000B                     	ds	1
   535  00000C                     ___lwmod@counter:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0xB
   539  00000C                     	ds	1
   540  00000D                     ?_sprintf:
   541                           	opt stack 0
   542  00000D                     debug@i:
   543                           	opt stack 0
   544  00000D                     sprintf@sp:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0xC
   548  00000D                     	ds	2
   549  00000F                     sprintf@f:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0xE
   553  00000F                     	ds	4
   554  000013                     ??_sprintf:
   555                           
   556                           ; 1 bytes @ 0x12
   557  000013                     	ds	1
   558  000014                     sprintf@idx:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x13
   562  000014                     	ds	1
   563  000015                     sprintf@ap:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x14
   567  000015                     	ds	2
   568  000017                     sprintf@prec:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x16
   572  000017                     	ds	1
   573  000018                     sprintf@flag:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x17
   577  000018                     	ds	1
   578  000019                     sprintf@val:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x18
   582  000019                     	ds	2
   583  00001B                     sprintf@c:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x1A
   587  00001B                     	ds	1
   588  00001C                     eeprom_test@ch:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x1B
   592  00001C                     	ds	1
   593  00001D                     eeprom_test@address:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x1C
   597  00001D                     	ds	1
   598  00001E                     eeprom_test@i:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x1D
   602  00001E                     	ds	2
   603  000020                     tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           
   610                           ; 1 bytes @ 0x1F
   611 ;;
   612 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   613 ;;
   614 ;; *************** function _main *****************
   615 ;; Defined at:
   616 ;;		line 100 in file "main.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;  ch              1    0        unsigned char 
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   630 ;;      Params:         0       0       0       0
   631 ;;      Locals:         0       0       0       0
   632 ;;      Temps:          0       0       0       0
   633 ;;      Totals:         0       0       0       0
   634 ;;Total ram usage:        0 bytes
   635 ;; Hardware stack levels required when called:    6
   636 ;; This function calls:
   637 ;;		_changeMode
   638 ;;		_delay
   639 ;;		_eeprom_test
   640 ;;		_eusart_init
   641 ;;		_processSerialData
   642 ;;		_state_machine
   643 ;; This function is called by:
   644 ;;		Startup code after reset
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           	psect	text0
   649  000858                     __ptext0:
   650                           	opt stack 0
   651  000858                     _main:
   652                           	opt stack 25
   653                           
   654                           ;main.c: 102: unsigned char ch;
   655                           ;main.c: 103: TRISA = 0x00;
   656                           
   657                           ;incstack = 0
   658  000858  0E00               	movlw	0
   659  00085A  6E92               	movwf	3986,c	;volatile
   660                           
   661                           ;main.c: 104: TRISB=0X00;
   662  00085C  0E00               	movlw	0
   663  00085E  6E93               	movwf	3987,c	;volatile
   664                           
   665                           ;main.c: 105: TRISC=0x00;
   666  000860  0E00               	movlw	0
   667  000862  6E94               	movwf	3988,c	;volatile
   668                           
   669                           ;main.c: 106: TRISD=0xff;
   670  000864  6895               	setf	3989,c	;volatile
   671                           
   672                           ;main.c: 108: OSCCON=0b01110010;
   673  000866  0E72               	movlw	114
   674  000868  6ED3               	movwf	4051,c	;volatile
   675                           
   676                           ;main.c: 109: PR2=0x9B;
   677  00086A  0E9B               	movlw	155
   678  00086C  6ECB               	movwf	4043,c	;volatile
   679                           
   680                           ;main.c: 110: T2CON=0x06;
   681  00086E  0E06               	movlw	6
   682  000870  6ECA               	movwf	4042,c	;volatile
   683                           
   684                           ;main.c: 115: PWMCON0 =0x2f;
   685  000872  0E2F               	movlw	47
   686  000874  6E6F               	movwf	3951,c	;volatile
   687                           
   688                           ;main.c: 116: PTCON0 =0x00;
   689  000876  0E00               	movlw	0
   690  000878  6E7F               	movwf	3967,c	;volatile
   691                           
   692                           ;main.c: 117: PTPERL =0xc4;
   693  00087A  0EC4               	movlw	196
   694  00087C  6E7B               	movwf	3963,c	;volatile
   695                           
   696                           ;main.c: 118: PTPERH =0x09;
   697  00087E  0E09               	movlw	9
   698  000880  6E7A               	movwf	3962,c	;volatile
   699                           
   700                           ;main.c: 119: PTMRL =0xc4;
   701  000882  0EC4               	movlw	196
   702  000884  6E7D               	movwf	3965,c	;volatile
   703                           
   704                           ;main.c: 120: PTMRH =0x09;
   705  000886  0E09               	movlw	9
   706  000888  6E7C               	movwf	3964,c	;volatile
   707                           
   708                           ;main.c: 123: PTCON1 =0x80;
   709  00088A  0E80               	movlw	128
   710  00088C  6E7E               	movwf	3966,c	;volatile
   711                           
   712                           ;main.c: 125: eusart_init(0, 0, 8000000UL, 9600);
   713  00088E  0E00               	movlw	0
   714  000890  6E01               	movwf	eusart_init@tx_mode,c
   715  000892  0E00               	movlw	0
   716  000894  6E02               	movwf	eusart_init@fosc,c
   717  000896  0E12               	movlw	18
   718  000898  6E03               	movwf	eusart_init@fosc+1,c
   719  00089A  0E7A               	movlw	122
   720  00089C  6E04               	movwf	eusart_init@fosc+2,c
   721  00089E  0E00               	movlw	0
   722  0008A0  6E05               	movwf	eusart_init@fosc+3,c
   723  0008A2  0E25               	movlw	37
   724  0008A4  6E07               	movwf	eusart_init@baud+1,c
   725  0008A6  0E80               	movlw	128
   726  0008A8  6E06               	movwf	eusart_init@baud,c
   727  0008AA  0E00               	movlw	0
   728  0008AC  EC81  F005         	call	_eusart_init
   729                           
   730                           ;main.c: 126: eeprom_test();
   731  0008B0  ECEC  F002         	call	_eeprom_test	;wreg free
   732  0008B4                     l1722:
   733                           
   734                           ;main.c: 128: {
   735                           ;main.c: 134: processSerialData();
   736  0008B4  EC7B  F003         	call	_processSerialData	;wreg free
   737                           
   738                           ;main.c: 135: changeMode();
   739  0008B8  EC67  F004         	call	_changeMode	;wreg free
   740                           
   741                           ;main.c: 136: state_machine();
   742  0008BC  ECC1  F005         	call	_state_machine	;wreg free
   743                           
   744                           ;main.c: 138: delay(9000);
   745  0008C0  0E23               	movlw	35
   746  0008C2  6E02               	movwf	delay@count+1,c
   747  0008C4  0E28               	movlw	40
   748  0008C6  6E01               	movwf	delay@count,c
   749  0008C8  EC98  F005         	call	_delay	;wreg free
   750  0008CC  D7F3               	goto	l1722
   751  0008CE                     __end_of_main:
   752                           	opt stack 0
   753                           tblptru	equ	0xFF8
   754                           tblptrh	equ	0xFF7
   755                           tblptrl	equ	0xFF6
   756                           tablat	equ	0xFF5
   757                           postinc0	equ	0xFEE
   758                           wreg	equ	0xFE8
   759                           
   760 ;; *************** function _state_machine *****************
   761 ;; Defined at:
   762 ;;		line 144 in file "main.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;		None
   767 ;; Return value:  Size  Location     Type
   768 ;;                  1    wreg      void 
   769 ;; Registers used:
   770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   776 ;;      Params:         0       0       0       0
   777 ;;      Locals:         0       0       0       0
   778 ;;      Temps:          0       0       0       0
   779 ;;      Totals:         0       0       0       0
   780 ;;Total ram usage:        0 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; Hardware stack levels required when called:    5
   783 ;; This function calls:
   784 ;;		_getPWMvalue
   785 ;; This function is called by:
   786 ;;		_main
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text1
   791  000B82                     __ptext1:
   792                           	opt stack 0
   793  000B82                     _state_machine:
   794                           	opt stack 25
   795                           
   796                           ;main.c: 146: static char flag=0;
   797                           ;main.c: 147: switch(state)
   798                           
   799                           ;incstack = 0
   800  000B82  D003               	goto	l1708
   801  000B84                     l1704:
   802                           
   803                           ;main.c: 150: getPWMvalue();
   804  000B84  ECA1  F004         	call	_getPWMvalue	;wreg free
   805                           
   806                           ;main.c: 157: }
   807                           
   808                           ;main.c: 156: break;
   809                           
   810                           ;main.c: 155: default:
   811                           
   812                           ;main.c: 153: break;
   813                           
   814                           ;main.c: 152: case 0x02:
   815                           
   816                           ;main.c: 151: break;
   817  000B88  D005               	goto	l1710
   818  000B8A                     l1708:
   819  000B8A  5028               	movf	_state,w,c
   820                           
   821                           ; Switch size 1, requested type "space"
   822                           ; Number of cases is 2, Range of values is 1 to 2
   823                           ; switch strategies available:
   824                           ; Name         Instructions Cycles
   825                           ; simple_byte            7     4 (average)
   826                           ;	Chosen strategy is simple_byte
   827  000B8C  0A01               	xorlw	1	; case 1
   828  000B8E  B4D8               	btfsc	status,2,c
   829  000B90  D7F9               	goto	l1704
   830  000B92  0A03               	xorlw	3	; case 2
   831  000B94                     l1710:
   832                           
   833                           ;main.c: 158: if(flag)
   834  000B94  5027               	movf	state_machine@flag,w,c
   835  000B96  B4D8               	btfsc	status,2,c
   836  000B98  D002               	goto	l93
   837                           
   838                           ;main.c: 159: PORTAbits.RA1=0b1;
   839  000B9A  8280               	bsf	3968,1,c	;volatile
   840  000B9C  0012               	return	
   841  000B9E                     l93:
   842                           
   843                           ;main.c: 160: else
   844                           ;main.c: 161: PORTAbits.RA1=0b0;
   845  000B9E  9280               	bcf	3968,1,c	;volatile
   846  000BA0  0012               	return	
   847  000BA2                     __end_of_state_machine:
   848                           	opt stack 0
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           postinc0	equ	0xFEE
   854                           wreg	equ	0xFE8
   855                           status	equ	0xFD8
   856                           
   857 ;; *************** function _getPWMvalue *****************
   858 ;; Defined at:
   859 ;;		line 133 in file "uart.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   873 ;;      Params:         0       0       0       0
   874 ;;      Locals:         0       0       0       0
   875 ;;      Temps:          0       0       0       0
   876 ;;      Totals:         0       0       0       0
   877 ;;Total ram usage:        0 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    4
   880 ;; This function calls:
   881 ;;		_debug
   882 ;;		_delay
   883 ;;		_memcpy
   884 ;;		_processSerialData
   885 ;;		_sprintf
   886 ;; This function is called by:
   887 ;;		_state_machine
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text2
   892  000942                     __ptext2:
   893                           	opt stack 0
   894  000942                     _getPWMvalue:
   895                           	opt stack 25
   896                           
   897                           ;uart.c: 135: debug("Enter PWM Value");
   898                           
   899                           ;incstack = 0
   900  000942  0E86               	movlw	low STR_7
   901  000944  6E07               	movwf	debug@str,c
   902  000946  0E03               	movlw	high STR_7
   903  000948  6E08               	movwf	debug@str+1,c
   904  00094A  ECE1  F003         	call	_debug	;wreg free
   905                           
   906                           ;uart.c: 137: delay(9000);
   907  00094E  0E23               	movlw	35
   908  000950  6E02               	movwf	delay@count+1,c
   909  000952  0E28               	movlw	40
   910  000954  6E01               	movwf	delay@count,c
   911  000956  EC98  F005         	call	_delay	;wreg free
   912                           
   913                           ;uart.c: 138: processSerialData();
   914  00095A  EC7B  F003         	call	_processSerialData	;wreg free
   915                           
   916                           ;uart.c: 139: memcpy(&testPWMValue,&uartBuffer[0],4);
   917  00095E  0E34               	movlw	low _testPWMValue
   918  000960  6E01               	movwf	memcpy@d1,c
   919  000962  0E00               	movlw	high _testPWMValue
   920  000964  6E02               	movwf	memcpy@d1+1,c
   921  000966  0E2C               	movlw	low _uartBuffer
   922  000968  6E03               	movwf	memcpy@s1,c
   923  00096A  0E00               	movlw	high _uartBuffer
   924  00096C  6E04               	movwf	memcpy@s1+1,c
   925  00096E  0E00               	movlw	0
   926  000970  6E06               	movwf	memcpy@n+1,c
   927  000972  0E04               	movlw	4
   928  000974  6E05               	movwf	memcpy@n,c
   929  000976  EC24  F005         	call	_memcpy	;wreg free
   930                           
   931                           ;uart.c: 140: sprintf(uartBuffer,"b:%d",testPWMValue);
   932  00097A  0E2C               	movlw	low _uartBuffer
   933  00097C  6E0D               	movwf	sprintf@sp,c
   934  00097E  0E00               	movlw	high _uartBuffer
   935  000980  6E0E               	movwf	sprintf@sp+1,c
   936  000982  0EC0               	movlw	low STR_8
   937  000984  6E0F               	movwf	sprintf@f,c
   938  000986  0E03               	movlw	high STR_8
   939  000988  6E10               	movwf	sprintf@f+1,c
   940  00098A  C034  F011         	movff	_testPWMValue,?_sprintf+4
   941  00098E  C035  F012         	movff	_testPWMValue+1,?_sprintf+5
   942  000992  ECE5  F001         	call	_sprintf	;wreg free
   943                           
   944                           ;uart.c: 141: debug(uartBuffer);
   945  000996  0E2C               	movlw	low _uartBuffer
   946  000998  6E07               	movwf	debug@str,c
   947  00099A  0E00               	movlw	high _uartBuffer
   948  00099C  6E08               	movwf	debug@str+1,c
   949  00099E  ECE1  F003         	call	_debug	;wreg free
   950  0009A2  0012               	return		;funcret
   951  0009A4                     __end_of_getPWMvalue:
   952                           	opt stack 0
   953                           tblptru	equ	0xFF8
   954                           tblptrh	equ	0xFF7
   955                           tblptrl	equ	0xFF6
   956                           tablat	equ	0xFF5
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           status	equ	0xFD8
   960                           
   961 ;; *************** function _processSerialData *****************
   962 ;; Defined at:
   963 ;;		line 71 in file "uart.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;		None
   966 ;; Auto vars:     Size  Location     Type
   967 ;;		None
   968 ;; Return value:  Size  Location     Type
   969 ;;                  1    wreg      void 
   970 ;; Registers used:
   971 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   977 ;;      Params:         0       0       0       0
   978 ;;      Locals:         0       0       0       0
   979 ;;      Temps:          0       0       0       0
   980 ;;      Totals:         0       0       0       0
   981 ;;Total ram usage:        0 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; Hardware stack levels required when called:    3
   984 ;; This function calls:
   985 ;;		_debug
   986 ;;		_delay
   987 ;;		_uart_recv_byte
   988 ;; This function is called by:
   989 ;;		_main
   990 ;;		_getPWMvalue
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           	psect	text3
   995  0006F6                     __ptext3:
   996                           	opt stack 0
   997  0006F6                     _processSerialData:
   998                           	opt stack 25
   999                           
  1000                           ;uart.c: 73: ch=uart_recv_byte(0x01);
  1001                           
  1002                           ;incstack = 0
  1003  0006F6  0E01               	movlw	1
  1004  0006F8  ECE8  F005         	call	_uart_recv_byte
  1005  0006FC  6E36               	movwf	_ch,c
  1006                           
  1007                           ;uart.c: 74: if(ch=='#')
  1008  0006FE  0E23               	movlw	35
  1009  000700  1836               	xorwf	_ch,w,c
  1010  000702  A4D8               	btfss	status,2,c
  1011  000704  0012               	return	
  1012                           
  1013                           ;uart.c: 75: {
  1014                           ;uart.c: 76: for(recvIdx=0;recvIdx<8;recvIdx++)
  1015  000706  0E00               	movlw	0
  1016  000708  6E23               	movwf	_recvIdx+1,c
  1017  00070A  0E00               	movlw	0
  1018  00070C  6E22               	movwf	_recvIdx,c
  1019  00070E                     l1420:
  1020  00070E  BE23               	btfsc	_recvIdx+1,7,c
  1021  000710  D006               	goto	l1424
  1022  000712  5023               	movf	_recvIdx+1,w,c
  1023  000714  E10F               	bnz	l1430
  1024  000716  0E08               	movlw	8
  1025  000718  5C22               	subwf	_recvIdx,w,c
  1026  00071A  B0D8               	btfsc	status,0,c
  1027  00071C  D00B               	goto	l1430
  1028  00071E                     l1424:
  1029                           
  1030                           ;uart.c: 77: uartBuffer[recvIdx]='\0';
  1031  00071E  0E2C               	movlw	low _uartBuffer
  1032  000720  2422               	addwf	_recvIdx,w,c
  1033  000722  6ED9               	movwf	fsr2l,c
  1034  000724  0E00               	movlw	high _uartBuffer
  1035  000726  2023               	addwfc	_recvIdx+1,w,c
  1036  000728  6EDA               	movwf	fsr2h,c
  1037  00072A  0E00               	movlw	0
  1038  00072C  6EDF               	movwf	indf2,c
  1039  00072E  4A22               	infsnz	_recvIdx,f,c
  1040  000730  2A23               	incf	_recvIdx+1,f,c
  1041  000732  D7ED               	goto	l1420
  1042  000734                     l1430:
  1043                           
  1044                           ;uart.c: 78: recvIdx = 0;
  1045  000734  0E00               	movlw	0
  1046  000736  6E23               	movwf	_recvIdx+1,c
  1047  000738  0E00               	movlw	0
  1048  00073A  6E22               	movwf	_recvIdx,c
  1049  00073C                     l1432:
  1050                           
  1051                           ;uart.c: 80: {
  1052                           ;uart.c: 81: ch=uart_recv_byte(0x00);
  1053  00073C  0E00               	movlw	0
  1054  00073E  ECE8  F005         	call	_uart_recv_byte
  1055  000742  6E36               	movwf	_ch,c
  1056                           
  1057                           ;uart.c: 82: if(ch=='$')
  1058  000744  0E24               	movlw	36
  1059  000746  1836               	xorwf	_ch,w,c
  1060  000748  B4D8               	btfsc	status,2,c
  1061  00074A  0012               	return	
  1062                           
  1063                           ;uart.c: 84: else if(ch=='X')
  1064                           
  1065                           ;uart.c: 83: break;
  1066  00074C  0E58               	movlw	88
  1067  00074E  1836               	xorwf	_ch,w,c
  1068  000750  A4D8               	btfss	status,2,c
  1069  000752  D009               	goto	l1446
  1070                           
  1071                           ;uart.c: 85: {
  1072                           ;uart.c: 86: debug("change to default mode");
  1073  000754  0E13               	movlw	low STR_1
  1074  000756  6E07               	movwf	debug@str,c
  1075  000758  0E03               	movlw	high STR_1
  1076  00075A  6E08               	movwf	debug@str+1,c
  1077  00075C  ECE1  F003         	call	_debug	;wreg free
  1078                           
  1079                           ;uart.c: 87: state = 0xFE;
  1080  000760  0EFE               	movlw	254
  1081  000762  6E28               	movwf	_state,c
  1082                           
  1083                           ;uart.c: 88: }
  1084  000764  D00B               	goto	l1454
  1085  000766                     l1446:
  1086                           
  1087                           ;uart.c: 89: else if(ch=='\0')
  1088  000766  5036               	movf	_ch,w,c
  1089  000768  B4D8               	btfsc	status,2,c
  1090  00076A  D7E8               	goto	l1432
  1091                           
  1092                           ;uart.c: 91: else
  1093                           ;uart.c: 92: uartBuffer[recvIdx]=ch;
  1094                           
  1095                           ;uart.c: 90: continue;
  1096  00076C  0E2C               	movlw	low _uartBuffer
  1097  00076E  2422               	addwf	_recvIdx,w,c
  1098  000770  6ED9               	movwf	fsr2l,c
  1099  000772  0E00               	movlw	high _uartBuffer
  1100  000774  2023               	addwfc	_recvIdx+1,w,c
  1101  000776  6EDA               	movwf	fsr2h,c
  1102  000778  C036  FFDF         	movff	_ch,indf2
  1103  00077C                     l1454:
  1104                           
  1105                           ;uart.c: 94: if(recvIdx > 8-1)
  1106  00077C  BE23               	btfsc	_recvIdx+1,7,c
  1107  00077E  D015               	goto	l1460
  1108  000780  5023               	movf	_recvIdx+1,w,c
  1109  000782  E104               	bnz	u680
  1110  000784  0E08               	movlw	8
  1111  000786  5C22               	subwf	_recvIdx,w,c
  1112  000788  A0D8               	btfss	status,0,c
  1113  00078A  D00F               	goto	l1460
  1114  00078C                     u680:
  1115                           
  1116                           ;uart.c: 95: {
  1117                           ;uart.c: 96: debug("Invalid data.");
  1118  00078C  0EA5               	movlw	low STR_2
  1119  00078E  6E07               	movwf	debug@str,c
  1120  000790  0E03               	movlw	high STR_2
  1121  000792  6E08               	movwf	debug@str+1,c
  1122  000794  ECE1  F003         	call	_debug	;wreg free
  1123                           
  1124                           ;uart.c: 97: debug("change to default mode");
  1125  000798  0E13               	movlw	low STR_1
  1126  00079A  6E07               	movwf	debug@str,c
  1127  00079C  0E03               	movlw	high STR_1
  1128  00079E  6E08               	movwf	debug@str+1,c
  1129  0007A0  ECE1  F003         	call	_debug	;wreg free
  1130                           
  1131                           ;uart.c: 98: state = 0xFE;
  1132  0007A4  0EFE               	movlw	254
  1133  0007A6  6E28               	movwf	_state,c
  1134                           
  1135                           ;uart.c: 99: }
  1136  0007A8  D002               	goto	l1462
  1137  0007AA                     l1460:
  1138                           
  1139                           ;uart.c: 100: else
  1140                           ;uart.c: 101: recvIdx++;
  1141  0007AA  4A22               	infsnz	_recvIdx,f,c
  1142  0007AC  2A23               	incf	_recvIdx+1,f,c
  1143  0007AE                     l1462:
  1144                           
  1145                           ;uart.c: 102: __nop();
  1146  0007AE  F000               	nop	
  1147                           
  1148                           ;uart.c: 103: __nop();
  1149  0007B0  F000               	nop	
  1150                           
  1151                           ;uart.c: 104: __nop();
  1152  0007B2  F000               	nop	
  1153                           
  1154                           ;uart.c: 105: delay(9000);
  1155  0007B4  0E23               	movlw	35
  1156  0007B6  6E02               	movwf	delay@count+1,c
  1157  0007B8  0E28               	movlw	40
  1158  0007BA  6E01               	movwf	delay@count,c
  1159  0007BC  EC98  F005         	call	_delay	;wreg free
  1160  0007C0  D7BD               	goto	l1432
  1161  0007C2                     __end_of_processSerialData:
  1162                           	opt stack 0
  1163                           tblptru	equ	0xFF8
  1164                           tblptrh	equ	0xFF7
  1165                           tblptrl	equ	0xFF6
  1166                           tablat	equ	0xFF5
  1167                           postinc0	equ	0xFEE
  1168                           wreg	equ	0xFE8
  1169                           indf2	equ	0xFDF
  1170                           fsr2h	equ	0xFDA
  1171                           fsr2l	equ	0xFD9
  1172                           status	equ	0xFD8
  1173                           
  1174 ;; *************** function _uart_recv_byte *****************
  1175 ;; Defined at:
  1176 ;;		line 48 in file "uart.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;  flag            1    wreg     unsigned char 
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;  flag            1    0[COMRAM] unsigned char 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      unsigned char 
  1183 ;; Registers used:
  1184 ;;		wreg, status,2
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1190 ;;      Params:         0       0       0       0
  1191 ;;      Locals:         0       0       0       0
  1192 ;;      Temps:          0       0       0       0
  1193 ;;      Totals:         0       0       0       0
  1194 ;;Total ram usage:        0 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; This function calls:
  1197 ;;		Nothing
  1198 ;; This function is called by:
  1199 ;;		_processSerialData
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text4
  1204  000BD0                     __ptext4:
  1205                           	opt stack 0
  1206  000BD0                     _uart_recv_byte:
  1207                           	opt stack 27
  1208  000BD0                     l156:
  1209  000BD0  AA9E               	btfss	3998,5,c	;volatile
  1210  000BD2  D7FE               	goto	l156
  1211                           
  1212                           ;uart.c: 53: }
  1213                           ;uart.c: 54: ch2 = RCREG;
  1214  000BD4  CFAE F026          	movff	4014,_ch2	;volatile
  1215                           
  1216                           ;uart.c: 55: return ch2;
  1217  000BD8  5026               	movf	_ch2,w,c
  1218  000BDA  0012               	return		;funcret
  1219  000BDC                     __end_of_uart_recv_byte:
  1220                           	opt stack 0
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           indf2	equ	0xFDF
  1228                           fsr2h	equ	0xFDA
  1229                           fsr2l	equ	0xFD9
  1230                           status	equ	0xFD8
  1231                           
  1232 ;; *************** function _memcpy *****************
  1233 ;; Defined at:
  1234 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memcpy.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  d1              2    0[COMRAM] PTR void 
  1237 ;;		 -> testPWMValue(2), 
  1238 ;;  s1              2    2[COMRAM] PTR const void 
  1239 ;;		 -> uartBuffer(8), 
  1240 ;;  n               2    4[COMRAM] unsigned int 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  s               2    8[COMRAM] PTR const unsigned char 
  1243 ;;		 -> uartBuffer(8), 
  1244 ;;  d               2    6[COMRAM] PTR unsigned char 
  1245 ;;		 -> testPWMValue(2), 
  1246 ;;  tmp             1   10[COMRAM] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  2    0[COMRAM] PTR void 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1256 ;;      Params:         6       0       0       0
  1257 ;;      Locals:         5       0       0       0
  1258 ;;      Temps:          0       0       0       0
  1259 ;;      Totals:        11       0       0       0
  1260 ;;Total ram usage:       11 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_getPWMvalue
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text5
  1270  000A48                     __ptext5:
  1271                           	opt stack 0
  1272  000A48                     _memcpy:
  1273                           	opt stack 28
  1274                           
  1275                           ;incstack = 0
  1276  000A48  C003  F009         	movff	memcpy@s1,memcpy@s
  1277  000A4C  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  1278  000A50  C001  F007         	movff	memcpy@d1,memcpy@d
  1279  000A54  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  1280  000A58  D010               	goto	l1480
  1281  000A5A                     l1472:
  1282  000A5A  C009  FFD9         	movff	memcpy@s,fsr2l
  1283  000A5E  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  1284  000A62  50DF               	movf	indf2,w,c
  1285  000A64  6E0B               	movwf	memcpy@tmp,c
  1286  000A66  4A09               	infsnz	memcpy@s,f,c
  1287  000A68  2A0A               	incf	memcpy@s+1,f,c
  1288  000A6A  C007  FFD9         	movff	memcpy@d,fsr2l
  1289  000A6E  C008  FFDA         	movff	memcpy@d+1,fsr2h
  1290  000A72  C00B  FFDF         	movff	memcpy@tmp,indf2
  1291  000A76  4A07               	infsnz	memcpy@d,f,c
  1292  000A78  2A08               	incf	memcpy@d+1,f,c
  1293  000A7A                     l1480:
  1294  000A7A  0605               	decf	memcpy@n,f,c
  1295  000A7C  A0D8               	btfss	status,0,c
  1296  000A7E  0606               	decf	memcpy@n+1,f,c
  1297  000A80  2805               	incf	memcpy@n,w,c
  1298  000A82  E1EB               	bnz	l1472
  1299  000A84  2806               	incf	memcpy@n+1,w,c
  1300  000A86  B4D8               	btfsc	status,2,c
  1301  000A88  0012               	return	
  1302  000A8A  D7E7               	goto	l1472
  1303  000A8C                     __end_of_memcpy:
  1304                           	opt stack 0
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           postinc0	equ	0xFEE
  1310                           wreg	equ	0xFE8
  1311                           indf2	equ	0xFDF
  1312                           fsr2h	equ	0xFDA
  1313                           fsr2l	equ	0xFD9
  1314                           status	equ	0xFD8
  1315                           
  1316 ;; *************** function _eusart_init *****************
  1317 ;; Defined at:
  1318 ;;		line 8 in file "uart.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  usart_mode      1    wreg     unsigned char 
  1321 ;;  tx_mode         1    0[COMRAM] unsigned char 
  1322 ;;  fosc            4    1[COMRAM] unsigned long 
  1323 ;;  baud            2    5[COMRAM] unsigned int 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;  usart_mode      1    7[COMRAM] unsigned char 
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  1    wreg      void 
  1328 ;; Registers used:
  1329 ;;		wreg, status,2, status,0
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1335 ;;      Params:         7       0       0       0
  1336 ;;      Locals:         1       0       0       0
  1337 ;;      Temps:          0       0       0       0
  1338 ;;      Totals:         8       0       0       0
  1339 ;;Total ram usage:        8 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; This function calls:
  1342 ;;		Nothing
  1343 ;; This function is called by:
  1344 ;;		_main
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           	psect	text6
  1349  000B02                     __ptext6:
  1350                           	opt stack 0
  1351  000B02                     _eusart_init:
  1352                           	opt stack 30
  1353                           
  1354                           ;incstack = 0
  1355                           ;eusart_init@usart_mode stored from wreg
  1356  000B02  6E08               	movwf	eusart_init@usart_mode,c
  1357                           
  1358                           ;uart.c: 11: TRISC6 = 0;
  1359  000B04  9C94               	bcf	3988,6,c	;volatile
  1360                           
  1361                           ;uart.c: 12: TRISC7 = 1;
  1362  000B06  8E94               	bsf	3988,7,c	;volatile
  1363                           
  1364                           ;uart.c: 14: switch(usart_mode)
  1365  000B08  D00A               	goto	l1608
  1366  000B0A                     l143:
  1367                           
  1368                           ;uart.c: 17: {
  1369                           ;uart.c: 18: BRG16 = 0;
  1370  000B0A  96AA               	bcf	4010,3,c	;volatile
  1371                           
  1372                           ;uart.c: 19: BAUDCTL = 0b00000000;
  1373  000B0C  0E00               	movlw	0
  1374  000B0E  6EAA               	movwf	4010,c	;volatile
  1375                           
  1376                           ;uart.c: 22: SPBRG =51;
  1377  000B10  0E33               	movlw	51
  1378  000B12  6EAF               	movwf	4015,c	;volatile
  1379                           
  1380                           ;uart.c: 24: TXSTA = 0b00100100;
  1381  000B14  0E24               	movlw	36
  1382  000B16  6EAC               	movwf	4012,c	;volatile
  1383                           
  1384                           ;uart.c: 25: RCSTA = 0x90;
  1385  000B18  0E90               	movlw	144
  1386  000B1A  6EAB               	movwf	4011,c	;volatile
  1387                           
  1388                           ;uart.c: 35: }
  1389                           ;uart.c: 36: }
  1390                           
  1391                           ;uart.c: 33: {
  1392                           ;uart.c: 34: break;
  1393                           
  1394                           ;uart.c: 31: }
  1395                           ;uart.c: 32: case 2:
  1396                           
  1397                           ;uart.c: 29: {
  1398                           ;uart.c: 30: break;
  1399                           
  1400                           ;uart.c: 27: }
  1401                           ;uart.c: 28: case 1:
  1402                           
  1403                           ;uart.c: 26: break;
  1404  000B1C  0012               	return	
  1405  000B1E                     l1608:
  1406  000B1E  5008               	movf	eusart_init@usart_mode,w,c
  1407                           
  1408                           ; Switch size 1, requested type "space"
  1409                           ; Number of cases is 3, Range of values is 0 to 2
  1410                           ; switch strategies available:
  1411                           ; Name         Instructions Cycles
  1412                           ; simple_byte           10     6 (average)
  1413                           ;	Chosen strategy is simple_byte
  1414  000B20  0A00               	xorlw	0	; case 0
  1415  000B22  B4D8               	btfsc	status,2,c
  1416  000B24  D7F2               	goto	l143
  1417  000B26  0A01               	xorlw	1	; case 1
  1418  000B28  B4D8               	btfsc	status,2,c
  1419  000B2A  0012               	return	
  1420  000B2C  0A03               	xorlw	3	; case 2
  1421  000B2E  0012               	return	
  1422  000B30                     __end_of_eusart_init:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           postinc0	equ	0xFEE
  1429                           wreg	equ	0xFE8
  1430                           indf2	equ	0xFDF
  1431                           fsr2h	equ	0xFDA
  1432                           fsr2l	equ	0xFD9
  1433                           status	equ	0xFD8
  1434                           
  1435 ;; *************** function _eeprom_test *****************
  1436 ;; Defined at:
  1437 ;;		line 4 in file "eeprom.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;		None
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;  i               2   29[COMRAM] int 
  1442 ;;  address         1   28[COMRAM] unsigned char 
  1443 ;;  ch              1   27[COMRAM] unsigned char 
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  2   36[None  ] int 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1453 ;;      Params:         0       0       0       0
  1454 ;;      Locals:         4       0       0       0
  1455 ;;      Temps:          0       0       0       0
  1456 ;;      Totals:         4       0       0       0
  1457 ;;Total ram usage:        4 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    3
  1460 ;; This function calls:
  1461 ;;		_debug
  1462 ;;		_delay
  1463 ;;		_eeprom_read_custom
  1464 ;;		_eeprom_write_custom
  1465 ;;		_sprintf
  1466 ;; This function is called by:
  1467 ;;		_main
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text7
  1472  0005D8                     __ptext7:
  1473                           	opt stack 0
  1474  0005D8                     _eeprom_test:
  1475                           	opt stack 27
  1476                           
  1477                           ;eeprom.c: 6: unsigned char ch=(unsigned char)1,address=0x01;
  1478                           
  1479                           ;incstack = 0
  1480  0005D8  0E01               	movlw	1
  1481  0005DA  6E1C               	movwf	eeprom_test@ch,c
  1482  0005DC  0E01               	movlw	1
  1483  0005DE  6E1D               	movwf	eeprom_test@address,c
  1484                           
  1485                           ;eeprom.c: 7: int i=0;
  1486  0005E0  0E00               	movlw	0
  1487  0005E2  6E1F               	movwf	eeprom_test@i+1,c
  1488  0005E4  0E00               	movlw	0
  1489  0005E6  6E1E               	movwf	eeprom_test@i,c
  1490                           
  1491                           ;eeprom.c: 8: EEPGD=0;
  1492  0005E8  9EA6               	bcf	4006,7,c	;volatile
  1493                           
  1494                           ;eeprom.c: 9: CFGS=0;
  1495  0005EA  9CA6               	bcf	4006,6,c	;volatile
  1496                           
  1497                           ;eeprom.c: 10: debug("writing values");
  1498  0005EC  0E96               	movlw	low STR_9
  1499  0005EE  6E07               	movwf	debug@str,c
  1500  0005F0  0E03               	movlw	high STR_9
  1501  0005F2  6E08               	movwf	debug@str+1,c
  1502  0005F4  ECE1  F003         	call	_debug	;wreg free
  1503                           
  1504                           ;eeprom.c: 33: for(i=0;i<250;i++)
  1505  0005F8  0E00               	movlw	0
  1506  0005FA  6E1F               	movwf	eeprom_test@i+1,c
  1507  0005FC  0E00               	movlw	0
  1508  0005FE  6E1E               	movwf	eeprom_test@i,c
  1509  000600                     l1620:
  1510  000600  BE1F               	btfsc	eeprom_test@i+1,7,c
  1511  000602  D006               	goto	l1624
  1512  000604  501F               	movf	eeprom_test@i+1,w,c
  1513  000606  E122               	bnz	l1640
  1514  000608  0EFA               	movlw	250
  1515  00060A  5C1E               	subwf	eeprom_test@i,w,c
  1516  00060C  B0D8               	btfsc	status,0,c
  1517  00060E  D01E               	goto	l1640
  1518  000610                     l1624:
  1519                           
  1520                           ;eeprom.c: 34: {
  1521                           ;eeprom.c: 35: eeprom_write_custom(address,i);
  1522  000610  C01E  F001         	movff	eeprom_test@i,eeprom_write_custom@data
  1523  000614  C01F  F002         	movff	eeprom_test@i+1,eeprom_write_custom@data+1
  1524  000618  501D               	movf	eeprom_test@address,w,c
  1525  00061A  ECAE  F005         	call	_eeprom_write_custom
  1526                           
  1527                           ;eeprom.c: 36: delay(9000);
  1528  00061E  0E23               	movlw	35
  1529  000620  6E02               	movwf	delay@count+1,c
  1530  000622  0E28               	movlw	40
  1531  000624  6E01               	movwf	delay@count,c
  1532  000626  EC98  F005         	call	_delay	;wreg free
  1533                           
  1534                           ;eeprom.c: 37: delay(9000);
  1535  00062A  0E23               	movlw	35
  1536  00062C  6E02               	movwf	delay@count+1,c
  1537  00062E  0E28               	movlw	40
  1538  000630  6E01               	movwf	delay@count,c
  1539  000632  EC98  F005         	call	_delay	;wreg free
  1540                           
  1541                           ;eeprom.c: 38: delay(9000);
  1542  000636  0E23               	movlw	35
  1543  000638  6E02               	movwf	delay@count+1,c
  1544  00063A  0E28               	movlw	40
  1545  00063C  6E01               	movwf	delay@count,c
  1546  00063E  EC98  F005         	call	_delay	;wreg free
  1547                           
  1548                           ;eeprom.c: 39: ch++;
  1549  000642  2A1C               	incf	eeprom_test@ch,f,c
  1550                           
  1551                           ;eeprom.c: 40: address++;
  1552  000644  2A1D               	incf	eeprom_test@address,f,c
  1553  000646  4A1E               	infsnz	eeprom_test@i,f,c
  1554  000648  2A1F               	incf	eeprom_test@i+1,f,c
  1555  00064A  D7DA               	goto	l1620
  1556  00064C                     l1640:
  1557                           
  1558                           ;eeprom.c: 41: }
  1559                           ;eeprom.c: 42: debug("reading values\n");
  1560  00064C  0E76               	movlw	low STR_10
  1561  00064E  6E07               	movwf	debug@str,c
  1562  000650  0E03               	movlw	high STR_10
  1563  000652  6E08               	movwf	debug@str+1,c
  1564  000654  ECE1  F003         	call	_debug	;wreg free
  1565                           
  1566                           ;eeprom.c: 43: delay(9000);
  1567  000658  0E23               	movlw	35
  1568  00065A  6E02               	movwf	delay@count+1,c
  1569  00065C  0E28               	movlw	40
  1570  00065E  6E01               	movwf	delay@count,c
  1571  000660  EC98  F005         	call	_delay	;wreg free
  1572                           
  1573                           ;eeprom.c: 44: for(i=0,address=0x01;i<250;i++,address++)
  1574  000664  0E00               	movlw	0
  1575  000666  6E1F               	movwf	eeprom_test@i+1,c
  1576  000668  0E00               	movlw	0
  1577  00066A  6E1E               	movwf	eeprom_test@i,c
  1578  00066C  0E01               	movlw	1
  1579  00066E  6E1D               	movwf	eeprom_test@address,c
  1580  000670                     l1648:
  1581  000670  BE1F               	btfsc	eeprom_test@i+1,7,c
  1582  000672  D006               	goto	l1652
  1583  000674  501F               	movf	eeprom_test@i+1,w,c
  1584  000676  E132               	bnz	l1670
  1585  000678  0EFA               	movlw	250
  1586  00067A  5C1E               	subwf	eeprom_test@i,w,c
  1587  00067C  B0D8               	btfsc	status,0,c
  1588  00067E  D02E               	goto	l1670
  1589  000680                     l1652:
  1590                           
  1591                           ;eeprom.c: 45: {
  1592                           ;eeprom.c: 46: ch = eeprom_read_custom(address);
  1593  000680  501D               	movf	eeprom_test@address,w,c
  1594  000682  ECDD  F005         	call	_eeprom_read_custom
  1595  000686  6E1C               	movwf	eeprom_test@ch,c
  1596                           
  1597                           ;eeprom.c: 48: sprintf(uartBuffer,"%x",readByte);
  1598  000688  0E2C               	movlw	low _uartBuffer
  1599  00068A  6E0D               	movwf	sprintf@sp,c
  1600  00068C  0E00               	movlw	high _uartBuffer
  1601  00068E  6E0E               	movwf	sprintf@sp+1,c
  1602  000690  0EC5               	movlw	low STR_11
  1603  000692  6E0F               	movwf	sprintf@f,c
  1604  000694  0E03               	movlw	high STR_11
  1605  000696  6E10               	movwf	sprintf@f+1,c
  1606  000698  C020  F011         	movff	_readByte,?_sprintf+4
  1607  00069C  C021  F012         	movff	_readByte+1,?_sprintf+5
  1608  0006A0  ECE5  F001         	call	_sprintf	;wreg free
  1609                           
  1610                           ;eeprom.c: 49: debug(uartBuffer);
  1611  0006A4  0E2C               	movlw	low _uartBuffer
  1612  0006A6  6E07               	movwf	debug@str,c
  1613  0006A8  0E00               	movlw	high _uartBuffer
  1614  0006AA  6E08               	movwf	debug@str+1,c
  1615  0006AC  ECE1  F003         	call	_debug	;wreg free
  1616                           
  1617                           ;eeprom.c: 50: delay(9000);
  1618  0006B0  0E23               	movlw	35
  1619  0006B2  6E02               	movwf	delay@count+1,c
  1620  0006B4  0E28               	movlw	40
  1621  0006B6  6E01               	movwf	delay@count,c
  1622  0006B8  EC98  F005         	call	_delay	;wreg free
  1623                           
  1624                           ;eeprom.c: 51: delay(9000);
  1625  0006BC  0E23               	movlw	35
  1626  0006BE  6E02               	movwf	delay@count+1,c
  1627  0006C0  0E28               	movlw	40
  1628  0006C2  6E01               	movwf	delay@count,c
  1629  0006C4  EC98  F005         	call	_delay	;wreg free
  1630                           
  1631                           ;eeprom.c: 52: delay(9000);
  1632  0006C8  0E23               	movlw	35
  1633  0006CA  6E02               	movwf	delay@count+1,c
  1634  0006CC  0E28               	movlw	40
  1635  0006CE  6E01               	movwf	delay@count,c
  1636  0006D0  EC98  F005         	call	_delay	;wreg free
  1637  0006D4  4A1E               	infsnz	eeprom_test@i,f,c
  1638  0006D6  2A1F               	incf	eeprom_test@i+1,f,c
  1639  0006D8  2A1D               	incf	eeprom_test@address,f,c
  1640  0006DA  D7CA               	goto	l1648
  1641  0006DC                     l1670:
  1642                           
  1643                           ;eeprom.c: 53: }
  1644                           ;eeprom.c: 54: debug("\n");
  1645  0006DC  0E84               	movlw	low (STR_10+14)
  1646  0006DE  6E07               	movwf	debug@str,c
  1647  0006E0  0E03               	movlw	high (STR_10+14)
  1648  0006E2  6E08               	movwf	debug@str+1,c
  1649  0006E4  ECE1  F003         	call	_debug	;wreg free
  1650                           
  1651                           ;eeprom.c: 55: debug("reading done");
  1652  0006E8  0EB3               	movlw	low STR_13
  1653  0006EA  6E07               	movwf	debug@str,c
  1654  0006EC  0E03               	movlw	high STR_13
  1655  0006EE  6E08               	movwf	debug@str+1,c
  1656  0006F0  ECE1  F003         	call	_debug	;wreg free
  1657  0006F4  0012               	return	
  1658  0006F6                     __end_of_eeprom_test:
  1659                           	opt stack 0
  1660                           tblptru	equ	0xFF8
  1661                           tblptrh	equ	0xFF7
  1662                           tblptrl	equ	0xFF6
  1663                           tablat	equ	0xFF5
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           indf2	equ	0xFDF
  1667                           fsr2h	equ	0xFDA
  1668                           fsr2l	equ	0xFD9
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function _sprintf *****************
  1672 ;; Defined at:
  1673 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1676 ;;		 -> uartBuffer(8), 
  1677 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1678 ;;		 -> STR_11(3), STR_8(5), 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  idx             1   19[COMRAM] unsigned char 
  1681 ;;  tmpval          4    0        struct .
  1682 ;;  cp              3    0        PTR const unsigned char 
  1683 ;;  val             2   24[COMRAM] unsigned int 
  1684 ;;  ap              2   20[COMRAM] PTR void [1]
  1685 ;;		 -> ?_sprintf(2), 
  1686 ;;  len             2    0        unsigned int 
  1687 ;;  c               1   26[COMRAM] char 
  1688 ;;  flag            1   23[COMRAM] unsigned char 
  1689 ;;  prec            1   22[COMRAM] char 
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  2   12[COMRAM] int 
  1692 ;; Registers used:
  1693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1694 ;; Tracked objects:
  1695 ;;		On entry : 0/0
  1696 ;;		On exit  : 0/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1699 ;;      Params:         6       0       0       0
  1700 ;;      Locals:         8       0       0       0
  1701 ;;      Temps:          1       0       0       0
  1702 ;;      Totals:        15       0       0       0
  1703 ;;Total ram usage:       15 bytes
  1704 ;; Hardware stack levels used:    1
  1705 ;; Hardware stack levels required when called:    1
  1706 ;; This function calls:
  1707 ;;		___lwdiv
  1708 ;;		___lwmod
  1709 ;; This function is called by:
  1710 ;;		_getPWMvalue
  1711 ;;		_eeprom_test
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text8
  1716  0003CA                     __ptext8:
  1717                           	opt stack 0
  1718  0003CA                     _sprintf:
  1719                           	opt stack 27
  1720                           
  1721                           ;doprnt.c: 494: va_list ap;
  1722                           ;doprnt.c: 499: signed char c;
  1723                           ;doprnt.c: 506: signed char prec;
  1724                           ;doprnt.c: 508: unsigned char flag;
  1725                           ;doprnt.c: 523: union {
  1726                           ;doprnt.c: 524: unsigned long vd;
  1727                           ;doprnt.c: 525: double integ;
  1728                           ;doprnt.c: 526: } tmpval;
  1729                           ;doprnt.c: 528: unsigned int val;
  1730                           ;doprnt.c: 529: unsigned len;
  1731                           ;doprnt.c: 530: const char * cp;
  1732                           ;doprnt.c: 533: *ap = __va_start();
  1733                           
  1734                           ;incstack = 0
  1735  0003CA  0E11               	movlw	low (?_sprintf+4)
  1736  0003CC  6E15               	movwf	sprintf@ap,c
  1737  0003CE  0E00               	movlw	high (?_sprintf+4)
  1738  0003D0  6E16               	movwf	sprintf@ap+1,c
  1739                           
  1740                           ;doprnt.c: 536: while(c = *f++) {
  1741  0003D2  D0EF               	goto	l1568
  1742  0003D4                     l1484:
  1743                           
  1744                           ;doprnt.c: 538: if(c != '%')
  1745  0003D4  0E25               	movlw	37
  1746  0003D6  181B               	xorwf	sprintf@c,w,c
  1747  0003D8  B4D8               	btfsc	status,2,c
  1748  0003DA  D009               	goto	l1490
  1749                           
  1750                           ;doprnt.c: 540: {
  1751                           ;doprnt.c: 541: ((*sp++ = (c)));
  1752  0003DC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1753  0003E0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1754  0003E4  C01B  FFDF         	movff	sprintf@c,indf2
  1755  0003E8  4A0D               	infsnz	sprintf@sp,f,c
  1756  0003EA  2A0E               	incf	sprintf@sp+1,f,c
  1757                           
  1758                           ;doprnt.c: 542: continue;
  1759  0003EC  D0E2               	goto	l1568
  1760  0003EE                     l1490:
  1761                           
  1762                           ;doprnt.c: 543: }
  1763                           ;doprnt.c: 548: flag = 0;
  1764  0003EE  0E00               	movlw	0
  1765  0003F0  6E18               	movwf	sprintf@flag,c
  1766                           
  1767                           ;doprnt.c: 635: switch(c = *f++) {
  1768  0003F2  D002               	goto	l1496
  1769  0003F4                     l1492:
  1770                           
  1771                           ;doprnt.c: 721: flag |= 0x80;
  1772  0003F4  8E18               	bsf	sprintf@flag,7,c
  1773                           
  1774                           ;doprnt.c: 723: break;
  1775  0003F6  D017               	goto	l257
  1776  0003F8                     l1496:
  1777  0003F8  C00F  FFF6         	movff	sprintf@f,tblptrl
  1778  0003FC  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1779  000400  4A0F               	infsnz	sprintf@f,f,c
  1780  000402  2A10               	incf	sprintf@f+1,f,c
  1781  000404                     	if	0	;tblptru may be non-zero
  1782  000404                     	endif
  1783  000404                     	if	0	;tblptru may be non-zero
  1784  000404                     	endif
  1785  000404  0008               	tblrd		*
  1786  000406  CFF5 F01B          	movff	tablat,sprintf@c
  1787  00040A  501B               	movf	sprintf@c,w,c
  1788                           
  1789                           ; Switch size 1, requested type "space"
  1790                           ; Number of cases is 4, Range of values is 0 to 120
  1791                           ; switch strategies available:
  1792                           ; Name         Instructions Cycles
  1793                           ; simple_byte           13     7 (average)
  1794                           ;	Chosen strategy is simple_byte
  1795  00040C  0A00               	xorlw	0	; case 0
  1796  00040E  B4D8               	btfsc	status,2,c
  1797  000410  D0DC               	goto	l1570
  1798  000412  0A64               	xorlw	100	; case 100
  1799  000414  B4D8               	btfsc	status,2,c
  1800  000416  D007               	goto	l257
  1801  000418  0A0D               	xorlw	13	; case 105
  1802  00041A  B4D8               	btfsc	status,2,c
  1803  00041C  D004               	goto	l257
  1804  00041E  0A11               	xorlw	17	; case 120
  1805  000420  B4D8               	btfsc	status,2,c
  1806  000422  D7E8               	goto	l1492
  1807  000424  D0C6               	goto	l1568
  1808  000426                     l257:
  1809                           
  1810                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1811  000426  BE18               	btfsc	sprintf@flag,7,c
  1812  000428  D015               	goto	l1508
  1813                           
  1814                           ;doprnt.c: 1253: {
  1815                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1816  00042A  C015  FFD9         	movff	sprintf@ap,fsr2l
  1817  00042E  C016  FFDA         	movff	sprintf@ap+1,fsr2h
  1818  000432  CFDE F019          	movff	postinc2,sprintf@val
  1819  000436  CFDD F01A          	movff	postdec2,sprintf@val+1
  1820  00043A  0E02               	movlw	2
  1821  00043C  2615               	addwf	sprintf@ap,f,c
  1822  00043E  0E00               	movlw	0
  1823  000440  2216               	addwfc	sprintf@ap+1,f,c
  1824                           
  1825                           ;doprnt.c: 1261: if((int)val < 0) {
  1826  000442  AE1A               	btfss	sprintf@val+1,7,c
  1827  000444  D044               	goto	l1542
  1828                           
  1829                           ;doprnt.c: 1262: flag |= 0x03;
  1830  000446  0E03               	movlw	3
  1831  000448  1218               	iorwf	sprintf@flag,f,c
  1832                           
  1833                           ;doprnt.c: 1263: val = -val;
  1834  00044A  6C19               	negf	sprintf@val,c
  1835  00044C  1E1A               	comf	sprintf@val+1,f,c
  1836  00044E  B0D8               	btfsc	status,0,c
  1837  000450  2A1A               	incf	sprintf@val+1,f,c
  1838                           
  1839                           ;doprnt.c: 1264: }
  1840                           ;doprnt.c: 1266: }
  1841  000452  D03D               	goto	l1542
  1842  000454                     l1508:
  1843                           
  1844                           ;doprnt.c: 1268: else
  1845                           ;doprnt.c: 1273: {
  1846                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1847  000454  C015  FFD9         	movff	sprintf@ap,fsr2l
  1848  000458  C016  FFDA         	movff	sprintf@ap+1,fsr2h
  1849  00045C  CFDE F019          	movff	postinc2,sprintf@val
  1850  000460  CFDD F01A          	movff	postdec2,sprintf@val+1
  1851  000464  0E02               	movlw	2
  1852  000466  2615               	addwf	sprintf@ap,f,c
  1853  000468  0E00               	movlw	0
  1854  00046A  2216               	addwfc	sprintf@ap+1,f,c
  1855                           
  1856                           ;doprnt.c: 1287: }
  1857                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1858  00046C  D030               	goto	l1542
  1859  00046E                     l1512:
  1860                           
  1861                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1862  00046E  0E01               	movlw	1
  1863  000470  6E1B               	movwf	sprintf@c,c
  1864  000472                     l1514:
  1865  000472  0E05               	movlw	5
  1866  000474  181B               	xorwf	sprintf@c,w,c
  1867  000476  B4D8               	btfsc	status,2,c
  1868  000478  D032               	goto	l1544
  1869                           
  1870                           ;doprnt.c: 1306: if(val < dpowers[c])
  1871  00047A  501B               	movf	sprintf@c,w,c
  1872  00047C  0D02               	mullw	2
  1873  00047E  0E01               	movlw	low _dpowers
  1874  000480  24F3               	addwf	prodl,w,c
  1875  000482  6EF6               	movwf	tblptrl,c
  1876  000484  0E03               	movlw	high _dpowers
  1877  000486  20F4               	addwfc	prodh,w,c
  1878  000488  6EF7               	movwf	tblptrh,c
  1879  00048A                     	if	0	;There are less than 3 active tblptr bytes
  1880  00048A                     	endif
  1881  00048A  0009               	tblrd		*+
  1882  00048C  50F5               	movf	tablat,w,c
  1883  00048E  5C19               	subwf	sprintf@val,w,c
  1884  000490  0009               	tblrd		*+
  1885  000492  50F5               	movf	tablat,w,c
  1886  000494  581A               	subwfb	sprintf@val+1,w,c
  1887  000496  A0D8               	btfss	status,0,c
  1888  000498  D022               	goto	l1544
  1889                           
  1890                           ;doprnt.c: 1307: break;
  1891  00049A  2A1B               	incf	sprintf@c,f,c
  1892  00049C  D7EA               	goto	l1514
  1893  00049E                     l1526:
  1894                           
  1895                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1896  00049E  0E01               	movlw	1
  1897  0004A0  6E1B               	movwf	sprintf@c,c
  1898  0004A2                     l1528:
  1899  0004A2  0E04               	movlw	4
  1900  0004A4  181B               	xorwf	sprintf@c,w,c
  1901  0004A6  B4D8               	btfsc	status,2,c
  1902  0004A8  D01A               	goto	l1544
  1903                           
  1904                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1905  0004AA  501B               	movf	sprintf@c,w,c
  1906  0004AC  0D02               	mullw	2
  1907  0004AE  0E0B               	movlw	low _hexpowers
  1908  0004B0  24F3               	addwf	prodl,w,c
  1909  0004B2  6EF6               	movwf	tblptrl,c
  1910  0004B4  0E03               	movlw	high _hexpowers
  1911  0004B6  20F4               	addwfc	prodh,w,c
  1912  0004B8  6EF7               	movwf	tblptrh,c
  1913  0004BA                     	if	0	;There are less than 3 active tblptr bytes
  1914  0004BA                     	endif
  1915  0004BA  0009               	tblrd		*+
  1916  0004BC  50F5               	movf	tablat,w,c
  1917  0004BE  5C19               	subwf	sprintf@val,w,c
  1918  0004C0  0009               	tblrd		*+
  1919  0004C2  50F5               	movf	tablat,w,c
  1920  0004C4  581A               	subwfb	sprintf@val+1,w,c
  1921  0004C6  A0D8               	btfss	status,0,c
  1922  0004C8  D00A               	goto	l1544
  1923                           
  1924                           ;doprnt.c: 1318: break;
  1925  0004CA  2A1B               	incf	sprintf@c,f,c
  1926  0004CC  D7EA               	goto	l1528
  1927  0004CE                     l1542:
  1928  0004CE  5018               	movf	sprintf@flag,w,c
  1929  0004D0  0B80               	andlw	128
  1930                           
  1931                           ; Switch size 1, requested type "space"
  1932                           ; Number of cases is 2, Range of values is 0 to 128
  1933                           ; switch strategies available:
  1934                           ; Name         Instructions Cycles
  1935                           ; simple_byte            7     4 (average)
  1936                           ;	Chosen strategy is simple_byte
  1937  0004D2  0A00               	xorlw	0	; case 0
  1938  0004D4  B4D8               	btfsc	status,2,c
  1939  0004D6  D7CB               	goto	l1512
  1940  0004D8  0A80               	xorlw	128	; case 128
  1941  0004DA  B4D8               	btfsc	status,2,c
  1942  0004DC  D7E0               	goto	l1526
  1943  0004DE                     l1544:
  1944                           
  1945                           ;doprnt.c: 1422: {
  1946                           ;doprnt.c: 1438: if(flag & 0x03)
  1947  0004DE  C018  F013         	movff	sprintf@flag,??_sprintf
  1948  0004E2  0E03               	movlw	3
  1949  0004E4  1613               	andwf	??_sprintf,f,c
  1950  0004E6  B4D8               	btfsc	status,2,c
  1951  0004E8  D008               	goto	l1550
  1952                           
  1953                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1954  0004EA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1955  0004EE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1956  0004F2  0E2D               	movlw	45
  1957  0004F4  6EDF               	movwf	indf2,c
  1958  0004F6  4A0D               	infsnz	sprintf@sp,f,c
  1959  0004F8  2A0E               	incf	sprintf@sp+1,f,c
  1960  0004FA                     l1550:
  1961                           
  1962                           ;doprnt.c: 1469: }
  1963                           ;doprnt.c: 1472: prec = c;
  1964  0004FA  C01B  F017         	movff	sprintf@c,sprintf@prec
  1965                           
  1966                           ;doprnt.c: 1474: while(prec--) {
  1967  0004FE  D055               	goto	l1566
  1968  000500                     l1552:
  1969                           
  1970                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1971  000500  5017               	movf	sprintf@prec,w,c
  1972  000502  0D02               	mullw	2
  1973  000504  0E01               	movlw	low _dpowers
  1974  000506  24F3               	addwf	prodl,w,c
  1975  000508  6EF6               	movwf	tblptrl,c
  1976  00050A  0E03               	movlw	high _dpowers
  1977  00050C  20F4               	addwfc	prodh,w,c
  1978  00050E  6EF7               	movwf	tblptrh,c
  1979  000510                     	if	0	;There are less than 3 active tblptr bytes
  1980  000510                     	endif
  1981  000510  0009               	tblrd		*+
  1982  000512  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1983  000516  000A               	tblrd		*-
  1984  000518  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1985  00051C  C019  F001         	movff	sprintf@val,___lwdiv@dividend
  1986  000520  C01A  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1987  000524  ECD2  F004         	call	___lwdiv	;wreg free
  1988  000528  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1989  00052C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1990  000530  0E00               	movlw	0
  1991  000532  6E0B               	movwf	___lwmod@divisor+1,c
  1992  000534  0E0A               	movlw	10
  1993  000536  6E0A               	movwf	___lwmod@divisor,c
  1994  000538  EC46  F005         	call	___lwmod	;wreg free
  1995  00053C  5008               	movf	?___lwmod,w,c
  1996  00053E  0F30               	addlw	48
  1997  000540  6E1B               	movwf	sprintf@c,c
  1998                           
  1999                           ;doprnt.c: 1491: break;
  2000  000542  D02B               	goto	l1562
  2001  000544                     l1554:
  2002                           
  2003                           ;doprnt.c: 1499: {
  2004                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2005  000544  C019  F001         	movff	sprintf@val,___lwdiv@dividend
  2006  000548  C01A  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  2007  00054C  5017               	movf	sprintf@prec,w,c
  2008  00054E  0D02               	mullw	2
  2009  000550  0E0B               	movlw	low _hexpowers
  2010  000552  24F3               	addwf	prodl,w,c
  2011  000554  6EF6               	movwf	tblptrl,c
  2012  000556  0E03               	movlw	high _hexpowers
  2013  000558  20F4               	addwfc	prodh,w,c
  2014  00055A  6EF7               	movwf	tblptrh,c
  2015  00055C                     	if	0	;There are less than 3 active tblptr bytes
  2016  00055C                     	endif
  2017  00055C  0009               	tblrd		*+
  2018  00055E  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2019  000562  000A               	tblrd		*-
  2020  000564  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2021  000568  ECD2  F004         	call	___lwdiv	;wreg free
  2022  00056C  5001               	movf	?___lwdiv,w,c
  2023  00056E  0B0F               	andlw	15
  2024  000570  6E14               	movwf	sprintf@idx,c
  2025                           
  2026                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2027  000572  5014               	movf	sprintf@idx,w,c
  2028  000574  0D01               	mullw	1
  2029  000576  0E65               	movlw	low STR_14
  2030  000578  24F3               	addwf	prodl,w,c
  2031  00057A  6EF6               	movwf	tblptrl,c
  2032  00057C  0E03               	movlw	high STR_14
  2033  00057E  20F4               	addwfc	prodh,w,c
  2034  000580  6EF7               	movwf	tblptrh,c
  2035  000582                     	if	0	;There are less than 3 active tblptr bytes
  2036  000582                     	endif
  2037  000582  0008               	tblrd		*
  2038  000584  CFF5 F01B          	movff	tablat,sprintf@c
  2039                           
  2040                           ;doprnt.c: 1523: }
  2041                           
  2042                           ;doprnt.c: 1508: }
  2043                           ;doprnt.c: 1510: break;
  2044  000588  D008               	goto	l1562
  2045  00058A                     l1560:
  2046  00058A  5018               	movf	sprintf@flag,w,c
  2047  00058C  0B80               	andlw	128
  2048                           
  2049                           ; Switch size 1, requested type "space"
  2050                           ; Number of cases is 2, Range of values is 0 to 128
  2051                           ; switch strategies available:
  2052                           ; Name         Instructions Cycles
  2053                           ; simple_byte            7     4 (average)
  2054                           ;	Chosen strategy is simple_byte
  2055  00058E  0A00               	xorlw	0	; case 0
  2056  000590  B4D8               	btfsc	status,2,c
  2057  000592  D7B6               	goto	l1552
  2058  000594  0A80               	xorlw	128	; case 128
  2059  000596  B4D8               	btfsc	status,2,c
  2060  000598  D7D5               	goto	l1554
  2061  00059A                     l1562:
  2062                           
  2063                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2064  00059A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2065  00059E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2066  0005A2  C01B  FFDF         	movff	sprintf@c,indf2
  2067  0005A6  4A0D               	infsnz	sprintf@sp,f,c
  2068  0005A8  2A0E               	incf	sprintf@sp+1,f,c
  2069  0005AA                     l1566:
  2070  0005AA  0617               	decf	sprintf@prec,f,c
  2071  0005AC  2817               	incf	sprintf@prec,w,c
  2072  0005AE  A4D8               	btfss	status,2,c
  2073  0005B0  D7EC               	goto	l1560
  2074  0005B2                     l1568:
  2075  0005B2  C00F  FFF6         	movff	sprintf@f,tblptrl
  2076  0005B6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2077  0005BA  4A0F               	infsnz	sprintf@f,f,c
  2078  0005BC  2A10               	incf	sprintf@f+1,f,c
  2079  0005BE                     	if	0	;tblptru may be non-zero
  2080  0005BE                     	endif
  2081  0005BE                     	if	0	;tblptru may be non-zero
  2082  0005BE                     	endif
  2083  0005BE  0008               	tblrd		*
  2084  0005C0  CFF5 F01B          	movff	tablat,sprintf@c
  2085  0005C4  501B               	movf	sprintf@c,w,c
  2086  0005C6  A4D8               	btfss	status,2,c
  2087  0005C8  D705               	goto	l1484
  2088  0005CA                     l1570:
  2089                           
  2090                           ;doprnt.c: 1538: *sp = 0;
  2091  0005CA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2092  0005CE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2093  0005D2  0E00               	movlw	0
  2094  0005D4  6EDF               	movwf	indf2,c
  2095  0005D6  0012               	return	
  2096  0005D8                     __end_of_sprintf:
  2097                           	opt stack 0
  2098                           tblptru	equ	0xFF8
  2099                           tblptrh	equ	0xFF7
  2100                           tblptrl	equ	0xFF6
  2101                           tablat	equ	0xFF5
  2102                           prodh	equ	0xFF4
  2103                           prodl	equ	0xFF3
  2104                           postinc0	equ	0xFEE
  2105                           wreg	equ	0xFE8
  2106                           indf2	equ	0xFDF
  2107                           postinc2	equ	0xFDE
  2108                           postdec2	equ	0xFDD
  2109                           fsr2h	equ	0xFDA
  2110                           fsr2l	equ	0xFD9
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function ___lwmod *****************
  2114 ;; Defined at:
  2115 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  dividend        2    7[COMRAM] unsigned int 
  2118 ;;  divisor         2    9[COMRAM] unsigned int 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  counter         1   11[COMRAM] unsigned char 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  2    7[COMRAM] unsigned int 
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2130 ;;      Params:         4       0       0       0
  2131 ;;      Locals:         1       0       0       0
  2132 ;;      Temps:          0       0       0       0
  2133 ;;      Totals:         5       0       0       0
  2134 ;;Total ram usage:        5 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; This function calls:
  2137 ;;		Nothing
  2138 ;; This function is called by:
  2139 ;;		_sprintf
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text9
  2144  000A8C                     __ptext9:
  2145                           	opt stack 0
  2146  000A8C                     ___lwmod:
  2147                           	opt stack 27
  2148                           
  2149                           ;incstack = 0
  2150  000A8C  500A               	movf	___lwmod@divisor,w,c
  2151  000A8E  100B               	iorwf	___lwmod@divisor+1,w,c
  2152  000A90  B4D8               	btfsc	status,2,c
  2153  000A92  D018               	goto	l695
  2154  000A94  0E01               	movlw	1
  2155  000A96  6E0C               	movwf	___lwmod@counter,c
  2156  000A98  D004               	goto	l1404
  2157  000A9A                     l1402:
  2158  000A9A  90D8               	bcf	status,0,c
  2159  000A9C  360A               	rlcf	___lwmod@divisor,f,c
  2160  000A9E  360B               	rlcf	___lwmod@divisor+1,f,c
  2161  000AA0  2A0C               	incf	___lwmod@counter,f,c
  2162  000AA2                     l1404:
  2163  000AA2  AE0B               	btfss	___lwmod@divisor+1,7,c
  2164  000AA4  D7FA               	goto	l1402
  2165  000AA6                     l1406:
  2166  000AA6  500A               	movf	___lwmod@divisor,w,c
  2167  000AA8  5C08               	subwf	___lwmod@dividend,w,c
  2168  000AAA  500B               	movf	___lwmod@divisor+1,w,c
  2169  000AAC  5809               	subwfb	___lwmod@dividend+1,w,c
  2170  000AAE  A0D8               	btfss	status,0,c
  2171  000AB0  D004               	goto	l1410
  2172  000AB2  500A               	movf	___lwmod@divisor,w,c
  2173  000AB4  5E08               	subwf	___lwmod@dividend,f,c
  2174  000AB6  500B               	movf	___lwmod@divisor+1,w,c
  2175  000AB8  5A09               	subwfb	___lwmod@dividend+1,f,c
  2176  000ABA                     l1410:
  2177  000ABA  90D8               	bcf	status,0,c
  2178  000ABC  320B               	rrcf	___lwmod@divisor+1,f,c
  2179  000ABE  320A               	rrcf	___lwmod@divisor,f,c
  2180  000AC0  2E0C               	decfsz	___lwmod@counter,f,c
  2181  000AC2  D7F1               	goto	l1406
  2182  000AC4                     l695:
  2183  000AC4  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2184  000AC8  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2185  000ACC  0012               	return		;funcret
  2186  000ACE                     __end_of___lwmod:
  2187                           	opt stack 0
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           postinc0	equ	0xFEE
  2195                           wreg	equ	0xFE8
  2196                           indf2	equ	0xFDF
  2197                           postinc2	equ	0xFDE
  2198                           postdec2	equ	0xFDD
  2199                           fsr2h	equ	0xFDA
  2200                           fsr2l	equ	0xFD9
  2201                           status	equ	0xFD8
  2202                           
  2203 ;; *************** function ___lwdiv *****************
  2204 ;; Defined at:
  2205 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  dividend        2    0[COMRAM] unsigned int 
  2208 ;;  divisor         2    2[COMRAM] unsigned int 
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  quotient        2    4[COMRAM] unsigned int 
  2211 ;;  counter         1    6[COMRAM] unsigned char 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;                  2    0[COMRAM] unsigned int 
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2221 ;;      Params:         4       0       0       0
  2222 ;;      Locals:         3       0       0       0
  2223 ;;      Temps:          0       0       0       0
  2224 ;;      Totals:         7       0       0       0
  2225 ;;Total ram usage:        7 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_sprintf
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text10
  2235  0009A4                     __ptext10:
  2236                           	opt stack 0
  2237  0009A4                     ___lwdiv:
  2238                           	opt stack 27
  2239                           
  2240                           ;incstack = 0
  2241  0009A4  0E00               	movlw	0
  2242  0009A6  6E06               	movwf	___lwdiv@quotient+1,c
  2243  0009A8  0E00               	movlw	0
  2244  0009AA  6E05               	movwf	___lwdiv@quotient,c
  2245  0009AC  5003               	movf	___lwdiv@divisor,w,c
  2246  0009AE  1004               	iorwf	___lwdiv@divisor+1,w,c
  2247  0009B0  B4D8               	btfsc	status,2,c
  2248  0009B2  D01C               	goto	l685
  2249  0009B4  0E01               	movlw	1
  2250  0009B6  6E07               	movwf	___lwdiv@counter,c
  2251  0009B8  D004               	goto	l1384
  2252  0009BA                     l1382:
  2253  0009BA  90D8               	bcf	status,0,c
  2254  0009BC  3603               	rlcf	___lwdiv@divisor,f,c
  2255  0009BE  3604               	rlcf	___lwdiv@divisor+1,f,c
  2256  0009C0  2A07               	incf	___lwdiv@counter,f,c
  2257  0009C2                     l1384:
  2258  0009C2  AE04               	btfss	___lwdiv@divisor+1,7,c
  2259  0009C4  D7FA               	goto	l1382
  2260  0009C6                     l1386:
  2261  0009C6  90D8               	bcf	status,0,c
  2262  0009C8  3605               	rlcf	___lwdiv@quotient,f,c
  2263  0009CA  3606               	rlcf	___lwdiv@quotient+1,f,c
  2264  0009CC  5003               	movf	___lwdiv@divisor,w,c
  2265  0009CE  5C01               	subwf	___lwdiv@dividend,w,c
  2266  0009D0  5004               	movf	___lwdiv@divisor+1,w,c
  2267  0009D2  5802               	subwfb	___lwdiv@dividend+1,w,c
  2268  0009D4  A0D8               	btfss	status,0,c
  2269  0009D6  D005               	goto	l1394
  2270  0009D8  5003               	movf	___lwdiv@divisor,w,c
  2271  0009DA  5E01               	subwf	___lwdiv@dividend,f,c
  2272  0009DC  5004               	movf	___lwdiv@divisor+1,w,c
  2273  0009DE  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2274  0009E0  8005               	bsf	___lwdiv@quotient,0,c
  2275  0009E2                     l1394:
  2276  0009E2  90D8               	bcf	status,0,c
  2277  0009E4  3204               	rrcf	___lwdiv@divisor+1,f,c
  2278  0009E6  3203               	rrcf	___lwdiv@divisor,f,c
  2279  0009E8  2E07               	decfsz	___lwdiv@counter,f,c
  2280  0009EA  D7ED               	goto	l1386
  2281  0009EC                     l685:
  2282  0009EC  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2283  0009F0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2284  0009F4  0012               	return		;funcret
  2285  0009F6                     __end_of___lwdiv:
  2286                           	opt stack 0
  2287                           tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           indf2	equ	0xFDF
  2296                           postinc2	equ	0xFDE
  2297                           postdec2	equ	0xFDD
  2298                           fsr2h	equ	0xFDA
  2299                           fsr2l	equ	0xFD9
  2300                           status	equ	0xFD8
  2301                           
  2302 ;; *************** function _eeprom_write_custom *****************
  2303 ;; Defined at:
  2304 ;;		line 67 in file "eeprom.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;  badd            1    wreg     unsigned char 
  2307 ;;  data            2    0[COMRAM] unsigned int 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  badd            1    2[COMRAM] unsigned char 
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      void 
  2312 ;; Registers used:
  2313 ;;		wreg, status,2
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2319 ;;      Params:         2       0       0       0
  2320 ;;      Locals:         1       0       0       0
  2321 ;;      Temps:          0       0       0       0
  2322 ;;      Totals:         3       0       0       0
  2323 ;;Total ram usage:        3 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; This function calls:
  2326 ;;		Nothing
  2327 ;; This function is called by:
  2328 ;;		_eeprom_test
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           	psect	text11
  2333  000B5C                     __ptext11:
  2334                           	opt stack 0
  2335  000B5C                     _eeprom_write_custom:
  2336                           	opt stack 29
  2337                           
  2338                           ;incstack = 0
  2339                           ;eeprom_write_custom@badd stored from wreg
  2340  000B5C  6E03               	movwf	eeprom_write_custom@badd,c
  2341                           
  2342                           ;eeprom.c: 70: EEADR = (badd & 0x0ff);
  2343  000B5E  C003  FFA9         	movff	eeprom_write_custom@badd,4009	;volatile
  2344                           
  2345                           ;eeprom.c: 72: EEDATA =data;
  2346  000B62  C001  FFA8         	movff	eeprom_write_custom@data,4008	;volatile
  2347                           
  2348                           ;eeprom.c: 73: EECON1bits.EEPGD = 0;
  2349  000B66  9EA6               	bcf	4006,7,c	;volatile
  2350                           
  2351                           ;eeprom.c: 74: EECON1bits.CFGS = 0;
  2352  000B68  9CA6               	bcf	4006,6,c	;volatile
  2353                           
  2354                           ;eeprom.c: 75: EECON1bits.WREN = 1;
  2355  000B6A  84A6               	bsf	4006,2,c	;volatile
  2356                           
  2357                           ;eeprom.c: 76: INTCONbits.GIE = 0;
  2358  000B6C  9EF2               	bcf	intcon,7,c	;volatile
  2359                           
  2360                           ;eeprom.c: 77: EECON2 = 0x55;
  2361  000B6E  0E55               	movlw	85
  2362  000B70  6EA7               	movwf	4007,c	;volatile
  2363                           
  2364                           ;eeprom.c: 78: EECON2 = 0xAA;
  2365  000B72  0EAA               	movlw	170
  2366  000B74  6EA7               	movwf	4007,c	;volatile
  2367                           
  2368                           ;eeprom.c: 79: EECON1bits.WR = 1;
  2369  000B76  82A6               	bsf	4006,1,c	;volatile
  2370  000B78                     l235:
  2371  000B78  B2A6               	btfsc	4006,1,c	;volatile
  2372  000B7A  D7FE               	goto	l235
  2373                           
  2374                           ;eeprom.c: 81: INTCONbits.GIE = 1;
  2375  000B7C  8EF2               	bsf	intcon,7,c	;volatile
  2376                           
  2377                           ;eeprom.c: 82: EECON1bits.WREN = 0;
  2378  000B7E  94A6               	bcf	4006,2,c	;volatile
  2379  000B80  0012               	return		;funcret
  2380  000B82                     __end_of_eeprom_write_custom:
  2381                           	opt stack 0
  2382                           tblptru	equ	0xFF8
  2383                           tblptrh	equ	0xFF7
  2384                           tblptrl	equ	0xFF6
  2385                           tablat	equ	0xFF5
  2386                           prodh	equ	0xFF4
  2387                           prodl	equ	0xFF3
  2388                           intcon	equ	0xFF2
  2389                           postinc0	equ	0xFEE
  2390                           wreg	equ	0xFE8
  2391                           indf2	equ	0xFDF
  2392                           postinc2	equ	0xFDE
  2393                           postdec2	equ	0xFDD
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           status	equ	0xFD8
  2397                           
  2398 ;; *************** function _eeprom_read_custom *****************
  2399 ;; Defined at:
  2400 ;;		line 58 in file "eeprom.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  badd            1    wreg     unsigned char 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  badd            1    0[COMRAM] unsigned char 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      unsigned char 
  2407 ;; Registers used:
  2408 ;;		wreg
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2414 ;;      Params:         0       0       0       0
  2415 ;;      Locals:         1       0       0       0
  2416 ;;      Temps:          0       0       0       0
  2417 ;;      Totals:         1       0       0       0
  2418 ;;Total ram usage:        1 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; This function calls:
  2421 ;;		Nothing
  2422 ;; This function is called by:
  2423 ;;		_eeprom_test
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text12
  2428  000BBA                     __ptext12:
  2429                           	opt stack 0
  2430  000BBA                     _eeprom_read_custom:
  2431                           	opt stack 29
  2432                           
  2433                           ;incstack = 0
  2434                           ;eeprom_read_custom@badd stored from wreg
  2435  000BBA  6E01               	movwf	eeprom_read_custom@badd,c
  2436                           
  2437                           ;eeprom.c: 60: EEADR = (badd & 0x0ff);
  2438  000BBC  C001  FFA9         	movff	eeprom_read_custom@badd,4009	;volatile
  2439                           
  2440                           ;eeprom.c: 61: EECON1bits.CFGS = 0;
  2441  000BC0  9CA6               	bcf	4006,6,c	;volatile
  2442                           
  2443                           ;eeprom.c: 62: EECON1bits.EEPGD = 0;
  2444  000BC2  9EA6               	bcf	4006,7,c	;volatile
  2445                           
  2446                           ;eeprom.c: 63: EECON1bits.RD = 1;
  2447  000BC4  80A6               	bsf	4006,0,c	;volatile
  2448                           
  2449                           ;eeprom.c: 64: readByte = EEDATA;
  2450  000BC6  CFA8 F020          	movff	4008,_readByte	;volatile
  2451  000BCA  6A21               	clrf	_readByte+1,c
  2452                           
  2453                           ;eeprom.c: 65: return 1;
  2454  000BCC  0E01               	movlw	1
  2455  000BCE  0012               	return	
  2456  000BD0                     __end_of_eeprom_read_custom:
  2457                           	opt stack 0
  2458                           tblptru	equ	0xFF8
  2459                           tblptrh	equ	0xFF7
  2460                           tblptrl	equ	0xFF6
  2461                           tablat	equ	0xFF5
  2462                           prodh	equ	0xFF4
  2463                           prodl	equ	0xFF3
  2464                           intcon	equ	0xFF2
  2465                           postinc0	equ	0xFEE
  2466                           wreg	equ	0xFE8
  2467                           indf2	equ	0xFDF
  2468                           postinc2	equ	0xFDE
  2469                           postdec2	equ	0xFDD
  2470                           fsr2h	equ	0xFDA
  2471                           fsr2l	equ	0xFD9
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _changeMode *****************
  2475 ;; Defined at:
  2476 ;;		line 110 in file "uart.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2490 ;;      Params:         0       0       0       0
  2491 ;;      Locals:         0       0       0       0
  2492 ;;      Temps:          0       0       0       0
  2493 ;;      Totals:         0       0       0       0
  2494 ;;Total ram usage:        0 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    3
  2497 ;; This function calls:
  2498 ;;		_debug
  2499 ;; This function is called by:
  2500 ;;		_main
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text13
  2505  0008CE                     __ptext13:
  2506                           	opt stack 0
  2507  0008CE                     _changeMode:
  2508                           	opt stack 27
  2509                           
  2510                           ;uart.c: 112: if((uartBuffer[0]=='T'))
  2511                           
  2512                           ;incstack = 0
  2513  0008CE  0E54               	movlw	84
  2514  0008D0  182C               	xorwf	_uartBuffer,w,c
  2515  0008D2  A4D8               	btfss	status,2,c
  2516  0008D4  D009               	goto	l1680
  2517                           
  2518                           ;uart.c: 113: {
  2519                           ;uart.c: 114: debug("entering test mode");
  2520  0008D6  0E40               	movlw	low STR_4
  2521  0008D8  6E07               	movwf	debug@str,c
  2522  0008DA  0E03               	movlw	high STR_4
  2523  0008DC  6E08               	movwf	debug@str+1,c
  2524  0008DE  ECE1  F003         	call	_debug	;wreg free
  2525                           
  2526                           ;uart.c: 115: state = 0x01;
  2527  0008E2  0E01               	movlw	1
  2528  0008E4  6E28               	movwf	_state,c
  2529                           
  2530                           ;uart.c: 116: }
  2531  0008E6  0012               	return	
  2532  0008E8                     l1680:
  2533                           
  2534                           ;uart.c: 117: else if((uartBuffer[0]=='S')&&(uartBuffer[1]=='E')&&(uartBuffer[2]=='T'))
  2535  0008E8  0E53               	movlw	83
  2536  0008EA  182C               	xorwf	_uartBuffer,w,c
  2537  0008EC  A4D8               	btfss	status,2,c
  2538  0008EE  D011               	goto	l1690
  2539  0008F0  0E45               	movlw	69
  2540  0008F2  182D               	xorwf	_uartBuffer+1,w,c
  2541  0008F4  A4D8               	btfss	status,2,c
  2542  0008F6  D00D               	goto	l1690
  2543  0008F8  0E54               	movlw	84
  2544  0008FA  182E               	xorwf	_uartBuffer+2,w,c
  2545  0008FC  A4D8               	btfss	status,2,c
  2546  0008FE  D009               	goto	l1690
  2547                           
  2548                           ;uart.c: 118: {
  2549                           ;uart.c: 119: debug("entering set mode");
  2550  000900  0E53               	movlw	low STR_5
  2551  000902  6E07               	movwf	debug@str,c
  2552  000904  0E03               	movlw	high STR_5
  2553  000906  6E08               	movwf	debug@str+1,c
  2554  000908  ECE1  F003         	call	_debug	;wreg free
  2555                           
  2556                           ;uart.c: 120: state= 0x02;
  2557  00090C  0E02               	movlw	2
  2558  00090E  6E28               	movwf	_state,c
  2559                           
  2560                           ;uart.c: 121: }
  2561  000910  0012               	return	
  2562  000912                     l1690:
  2563                           
  2564                           ;uart.c: 122: else if((uartBuffer[0]=='F')&&(uartBuffer[1]=='I')&&(uartBuffer[2]=='N'))
  2565  000912  0E46               	movlw	70
  2566  000914  182C               	xorwf	_uartBuffer,w,c
  2567  000916  A4D8               	btfss	status,2,c
  2568  000918  D011               	goto	l1700
  2569  00091A  0E49               	movlw	73
  2570  00091C  182D               	xorwf	_uartBuffer+1,w,c
  2571  00091E  A4D8               	btfss	status,2,c
  2572  000920  D00D               	goto	l1700
  2573  000922  0E4E               	movlw	78
  2574  000924  182E               	xorwf	_uartBuffer+2,w,c
  2575  000926  A4D8               	btfss	status,2,c
  2576  000928  D009               	goto	l1700
  2577                           
  2578                           ;uart.c: 123: {
  2579                           ;uart.c: 124: debug("Going to Default Mode");
  2580  00092A  0E2A               	movlw	low STR_6
  2581  00092C  6E07               	movwf	debug@str,c
  2582  00092E  0E03               	movlw	high STR_6
  2583  000930  6E08               	movwf	debug@str+1,c
  2584  000932  ECE1  F003         	call	_debug	;wreg free
  2585                           
  2586                           ;uart.c: 125: state= 0xFE;
  2587  000936  0EFE               	movlw	254
  2588  000938  6E28               	movwf	_state,c
  2589                           
  2590                           ;uart.c: 126: }
  2591  00093A  0012               	return	
  2592  00093C                     l1700:
  2593                           
  2594                           ;uart.c: 127: else
  2595                           ;uart.c: 128: {
  2596                           ;uart.c: 130: state = 0xFE;
  2597  00093C  0EFE               	movlw	254
  2598  00093E  6E28               	movwf	_state,c
  2599  000940  0012               	return	
  2600  000942                     __end_of_changeMode:
  2601                           	opt stack 0
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           intcon	equ	0xFF2
  2609                           postinc0	equ	0xFEE
  2610                           wreg	equ	0xFE8
  2611                           indf2	equ	0xFDF
  2612                           postinc2	equ	0xFDE
  2613                           postdec2	equ	0xFDD
  2614                           fsr2h	equ	0xFDA
  2615                           fsr2l	equ	0xFD9
  2616                           status	equ	0xFD8
  2617                           
  2618 ;; *************** function _debug *****************
  2619 ;; Defined at:
  2620 ;;		line 57 in file "uart.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  str             2    6[COMRAM] PTR unsigned char 
  2623 ;;		 -> STR_13(13), STR_12(2), STR_10(16), STR_9(15), 
  2624 ;;		 -> STR_7(16), STR_6(22), STR_5(18), STR_4(19), 
  2625 ;;		 -> STR_3(23), STR_2(14), STR_1(23), uartBuffer(8), 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  i               2   12[COMRAM] int 
  2628 ;;  len             2   10[COMRAM] int 
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      void 
  2631 ;; Registers used:
  2632 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2638 ;;      Params:         2       0       0       0
  2639 ;;      Locals:         4       0       0       0
  2640 ;;      Temps:          2       0       0       0
  2641 ;;      Totals:         8       0       0       0
  2642 ;;Total ram usage:        8 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    2
  2645 ;; This function calls:
  2646 ;;		_delay
  2647 ;;		_strlen
  2648 ;;		_uart_send_byte
  2649 ;; This function is called by:
  2650 ;;		_processSerialData
  2651 ;;		_changeMode
  2652 ;;		_getPWMvalue
  2653 ;;		_eeprom_test
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           	psect	text14
  2658  0007C2                     __ptext14:
  2659                           	opt stack 0
  2660  0007C2                     _debug:
  2661                           	opt stack 25
  2662                           
  2663                           ;uart.c: 59: int len=0,i=0;
  2664                           
  2665                           ;incstack = 0
  2666  0007C2  0E00               	movlw	0
  2667  0007C4  6E0C               	movwf	debug@len+1,c
  2668  0007C6  0E00               	movlw	0
  2669  0007C8  6E0B               	movwf	debug@len,c
  2670  0007CA  0E00               	movlw	0
  2671  0007CC  6E0E               	movwf	debug@i+1,c
  2672  0007CE  0E00               	movlw	0
  2673  0007D0  6E0D               	movwf	debug@i,c
  2674                           
  2675                           ;uart.c: 60: len=strlen(str);
  2676  0007D2  C007  F001         	movff	debug@str,strlen@s
  2677  0007D6  C008  F002         	movff	debug@str+1,strlen@s+1
  2678  0007DA  ECFB  F004         	call	_strlen	;wreg free
  2679  0007DE  C001  F00B         	movff	?_strlen,debug@len
  2680  0007E2  C002  F00C         	movff	?_strlen+1,debug@len+1
  2681                           
  2682                           ;uart.c: 61: for(i=0;i<len;i++)
  2683  0007E6  0E00               	movlw	0
  2684  0007E8  6E0E               	movwf	debug@i+1,c
  2685  0007EA  0E00               	movlw	0
  2686  0007EC  6E0D               	movwf	debug@i,c
  2687  0007EE  D020               	goto	l1372
  2688  0007F0                     l1366:
  2689                           
  2690                           ;uart.c: 62: {
  2691                           ;uart.c: 63: uart_send_byte(str[i]);
  2692  0007F0  500D               	movf	debug@i,w,c
  2693  0007F2  2407               	addwf	debug@str,w,c
  2694  0007F4  6E09               	movwf	??_debug& (0+255),c
  2695  0007F6  500E               	movf	debug@i+1,w,c
  2696  0007F8  2008               	addwfc	debug@str+1,w,c
  2697  0007FA  6E0A               	movwf	(??_debug+1)& (0+255),c
  2698  0007FC  C009  FFF6         	movff	??_debug,tblptrl
  2699  000800  C00A  FFF7         	movff	??_debug+1,tblptrh
  2700  000804  6AF8               	clrf	tblptru,c
  2701  000806  0E02               	movlw	(high __ramtop+-1)
  2702  000808  64F7               	cpfsgt	tblptrh,c
  2703  00080A  D003               	bra	u547
  2704  00080C  0008               	tblrd		*
  2705  00080E  50F5               	movf	tablat,w,c
  2706  000810  D005               	bra	u540
  2707  000812                     u547:
  2708  000812  CFF6 FFE9          	movff	tblptrl,fsr0l
  2709  000816  CFF7 FFEA          	movff	tblptrh,fsr0h
  2710  00081A  50EF               	movf	indf0,w,c
  2711  00081C                     u540:
  2712  00081C  ECD1  F005         	call	_uart_send_byte
  2713                           
  2714                           ;uart.c: 66: delay(100);
  2715  000820  0E00               	movlw	0
  2716  000822  6E02               	movwf	delay@count+1,c
  2717  000824  0E64               	movlw	100
  2718  000826  6E01               	movwf	delay@count,c
  2719  000828  EC98  F005         	call	_delay	;wreg free
  2720  00082C  4A0D               	infsnz	debug@i,f,c
  2721  00082E  2A0E               	incf	debug@i+1,f,c
  2722  000830                     l1372:
  2723  000830  500B               	movf	debug@len,w,c
  2724  000832  5C0D               	subwf	debug@i,w,c
  2725  000834  500E               	movf	debug@i+1,w,c
  2726  000836  0A80               	xorlw	128
  2727  000838  6E09               	movwf	??_debug& (0+255),c
  2728  00083A  500C               	movf	debug@len+1,w,c
  2729  00083C  0A80               	xorlw	128
  2730  00083E  5809               	subwfb	??_debug& (0+255),w,c
  2731  000840  A0D8               	btfss	status,0,c
  2732  000842  D7D6               	goto	l1366
  2733                           
  2734                           ;uart.c: 67: }
  2735                           ;uart.c: 68: uart_send_byte('\n');
  2736  000844  0E0A               	movlw	10
  2737  000846  ECD1  F005         	call	_uart_send_byte
  2738                           
  2739                           ;uart.c: 69: delay(100);
  2740  00084A  0E00               	movlw	0
  2741  00084C  6E02               	movwf	delay@count+1,c
  2742  00084E  0E64               	movlw	100
  2743  000850  6E01               	movwf	delay@count,c
  2744  000852  EC98  F005         	call	_delay	;wreg free
  2745  000856  0012               	return		;funcret
  2746  000858                     __end_of_debug:
  2747                           	opt stack 0
  2748                           tblptru	equ	0xFF8
  2749                           tblptrh	equ	0xFF7
  2750                           tblptrl	equ	0xFF6
  2751                           tablat	equ	0xFF5
  2752                           prodh	equ	0xFF4
  2753                           prodl	equ	0xFF3
  2754                           intcon	equ	0xFF2
  2755                           indf0	equ	0xFEF
  2756                           postinc0	equ	0xFEE
  2757                           fsr0h	equ	0xFEA
  2758                           fsr0l	equ	0xFE9
  2759                           wreg	equ	0xFE8
  2760                           indf2	equ	0xFDF
  2761                           postinc2	equ	0xFDE
  2762                           postdec2	equ	0xFDD
  2763                           fsr2h	equ	0xFDA
  2764                           fsr2l	equ	0xFD9
  2765                           status	equ	0xFD8
  2766                           
  2767 ;; *************** function _uart_send_byte *****************
  2768 ;; Defined at:
  2769 ;;		line 39 in file "uart.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;  byte            1    wreg     unsigned char 
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;  byte            1    5[COMRAM] unsigned char 
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      void 
  2776 ;; Registers used:
  2777 ;;		wreg, status,2, status,0, cstack
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2783 ;;      Params:         0       0       0       0
  2784 ;;      Locals:         1       0       0       0
  2785 ;;      Temps:          0       0       0       0
  2786 ;;      Totals:         1       0       0       0
  2787 ;;Total ram usage:        1 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    1
  2790 ;; This function calls:
  2791 ;;		_delay
  2792 ;; This function is called by:
  2793 ;;		_debug
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           	psect	text15
  2798  000BA2                     __ptext15:
  2799                           	opt stack 0
  2800  000BA2                     _uart_send_byte:
  2801                           	opt stack 25
  2802                           
  2803                           ;incstack = 0
  2804                           ;uart_send_byte@byte stored from wreg
  2805  000BA2  6E06               	movwf	uart_send_byte@byte,c
  2806  000BA4                     l150:
  2807  000BA4  A89E               	btfss	3998,4,c	;volatile
  2808  000BA6  D7FE               	goto	l150
  2809                           
  2810                           ;uart.c: 44: }
  2811                           ;uart.c: 45: TXREG = byte;
  2812  000BA8  C006  FFAD         	movff	uart_send_byte@byte,4013	;volatile
  2813                           
  2814                           ;uart.c: 46: delay(1000);
  2815  000BAC  0E03               	movlw	3
  2816  000BAE  6E02               	movwf	delay@count+1,c
  2817  000BB0  0EE8               	movlw	232
  2818  000BB2  6E01               	movwf	delay@count,c
  2819  000BB4  EC98  F005         	call	_delay	;wreg free
  2820  000BB8  0012               	return		;funcret
  2821  000BBA                     __end_of_uart_send_byte:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           prodh	equ	0xFF4
  2828                           prodl	equ	0xFF3
  2829                           intcon	equ	0xFF2
  2830                           indf0	equ	0xFEF
  2831                           postinc0	equ	0xFEE
  2832                           fsr0h	equ	0xFEA
  2833                           fsr0l	equ	0xFE9
  2834                           wreg	equ	0xFE8
  2835                           indf2	equ	0xFDF
  2836                           postinc2	equ	0xFDE
  2837                           postdec2	equ	0xFDD
  2838                           fsr2h	equ	0xFDA
  2839                           fsr2l	equ	0xFD9
  2840                           status	equ	0xFD8
  2841                           
  2842 ;; *************** function _delay *****************
  2843 ;; Defined at:
  2844 ;;		line 89 in file "main.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  count           2    0[COMRAM] int 
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;  i               2    3[COMRAM] int 
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  1    wreg      void 
  2851 ;; Registers used:
  2852 ;;		wreg, status,2, status,0
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2858 ;;      Params:         2       0       0       0
  2859 ;;      Locals:         2       0       0       0
  2860 ;;      Temps:          1       0       0       0
  2861 ;;      Totals:         5       0       0       0
  2862 ;;Total ram usage:        5 bytes
  2863 ;; Hardware stack levels used:    1
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_main
  2868 ;;		_uart_send_byte
  2869 ;;		_debug
  2870 ;;		_processSerialData
  2871 ;;		_getPWMvalue
  2872 ;;		_eeprom_test
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text16
  2877  000B30                     __ptext16:
  2878                           	opt stack 0
  2879  000B30                     _delay:
  2880                           	opt stack 27
  2881                           
  2882                           ;main.c: 91: int i=0;
  2883                           
  2884                           ;incstack = 0
  2885  000B30  0E00               	movlw	0
  2886  000B32  6E05               	movwf	delay@i+1,c
  2887  000B34  0E00               	movlw	0
  2888  000B36  6E04               	movwf	delay@i,c
  2889                           
  2890                           ;main.c: 93: for(i=0;i<count;i++)
  2891  000B38  0E00               	movlw	0
  2892  000B3A  6E05               	movwf	delay@i+1,c
  2893  000B3C  0E00               	movlw	0
  2894  000B3E  6E04               	movwf	delay@i,c
  2895  000B40  D002               	goto	l1342
  2896  000B42                     l1340:
  2897                           
  2898                           ;main.c: 94: {
  2899  000B42  4A04               	infsnz	delay@i,f,c
  2900  000B44  2A05               	incf	delay@i+1,f,c
  2901  000B46                     l1342:
  2902  000B46  5001               	movf	delay@count,w,c
  2903  000B48  5C04               	subwf	delay@i,w,c
  2904  000B4A  5005               	movf	delay@i+1,w,c
  2905  000B4C  0A80               	xorlw	128
  2906  000B4E  6E03               	movwf	??_delay& (0+255),c
  2907  000B50  5002               	movf	delay@count+1,w,c
  2908  000B52  0A80               	xorlw	128
  2909  000B54  5803               	subwfb	??_delay& (0+255),w,c
  2910  000B56  B0D8               	btfsc	status,0,c
  2911  000B58  0012               	return	
  2912  000B5A  D7F3               	goto	l1340
  2913  000B5C                     __end_of_delay:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           prodh	equ	0xFF4
  2920                           prodl	equ	0xFF3
  2921                           intcon	equ	0xFF2
  2922                           indf0	equ	0xFEF
  2923                           postinc0	equ	0xFEE
  2924                           fsr0h	equ	0xFEA
  2925                           fsr0l	equ	0xFE9
  2926                           wreg	equ	0xFE8
  2927                           indf2	equ	0xFDF
  2928                           postinc2	equ	0xFDE
  2929                           postdec2	equ	0xFDD
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _strlen *****************
  2935 ;; Defined at:
  2936 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\strlen.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2939 ;;		 -> STR_13(13), STR_12(2), STR_10(16), STR_9(15), 
  2940 ;;		 -> STR_7(16), STR_6(22), STR_5(18), STR_4(19), 
  2941 ;;		 -> STR_3(23), STR_2(14), STR_1(23), uartBuffer(8), 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  2944 ;;		 -> STR_13(13), STR_12(2), STR_10(16), STR_9(15), 
  2945 ;;		 -> STR_7(16), STR_6(22), STR_5(18), STR_4(19), 
  2946 ;;		 -> STR_3(23), STR_2(14), STR_1(23), uartBuffer(8), 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  2    0[COMRAM] unsigned int 
  2949 ;; Registers used:
  2950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2956 ;;      Params:         2       0       0       0
  2957 ;;      Locals:         2       0       0       0
  2958 ;;      Temps:          2       0       0       0
  2959 ;;      Totals:         6       0       0       0
  2960 ;;Total ram usage:        6 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_debug
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text17
  2970  0009F6                     __ptext17:
  2971                           	opt stack 0
  2972  0009F6                     _strlen:
  2973                           	opt stack 26
  2974                           
  2975                           ;incstack = 0
  2976  0009F6  C001  F005         	movff	strlen@s,strlen@cp
  2977  0009FA  C002  F006         	movff	strlen@s+1,strlen@cp+1
  2978  0009FE  D002               	goto	l1354
  2979  000A00                     l1352:
  2980  000A00  4A05               	infsnz	strlen@cp,f,c
  2981  000A02  2A06               	incf	strlen@cp+1,f,c
  2982  000A04                     l1354:
  2983  000A04  C005  FFF6         	movff	strlen@cp,tblptrl
  2984  000A08  C006  FFF7         	movff	strlen@cp+1,tblptrh
  2985  000A0C  6AF8               	clrf	tblptru,c
  2986  000A0E  0E02               	movlw	(high __ramtop+-1)
  2987  000A10  64F7               	cpfsgt	tblptrh,c
  2988  000A12  D003               	bra	u527
  2989  000A14  0008               	tblrd		*
  2990  000A16  50F5               	movf	tablat,w,c
  2991  000A18  D005               	bra	u520
  2992  000A1A                     u527:
  2993  000A1A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2994  000A1E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2995  000A22  50EF               	movf	indf0,w,c
  2996  000A24                     u520:
  2997  000A24  0900               	iorlw	0
  2998  000A26  A4D8               	btfss	status,2,c
  2999  000A28  D7EB               	goto	l1352
  3000  000A2A  C001  F003         	movff	strlen@s,??_strlen
  3001  000A2E  C002  F004         	movff	strlen@s+1,??_strlen+1
  3002  000A32  1E03               	comf	??_strlen,f,c
  3003  000A34  1E04               	comf	??_strlen+1,f,c
  3004  000A36  4A03               	infsnz	??_strlen,f,c
  3005  000A38  2A04               	incf	??_strlen+1,f,c
  3006  000A3A  5005               	movf	strlen@cp,w,c
  3007  000A3C  2403               	addwf	??_strlen,w,c
  3008  000A3E  6E01               	movwf	?_strlen,c
  3009  000A40  5006               	movf	strlen@cp+1,w,c
  3010  000A42  2004               	addwfc	??_strlen+1,w,c
  3011  000A44  6E02               	movwf	?_strlen+1,c
  3012  000A46  0012               	return	
  3013  000A48                     __end_of_strlen:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           prodh	equ	0xFF4
  3020                           prodl	equ	0xFF3
  3021                           intcon	equ	0xFF2
  3022                           indf0	equ	0xFEF
  3023                           postinc0	equ	0xFEE
  3024                           fsr0h	equ	0xFEA
  3025                           fsr0l	equ	0xFE9
  3026                           wreg	equ	0xFE8
  3027                           indf2	equ	0xFDF
  3028                           postinc2	equ	0xFDE
  3029                           postdec2	equ	0xFDD
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           tblptru	equ	0xFF8
  3034                           tblptrh	equ	0xFF7
  3035                           tblptrl	equ	0xFF6
  3036                           tablat	equ	0xFF5
  3037                           prodh	equ	0xFF4
  3038                           prodl	equ	0xFF3
  3039                           intcon	equ	0xFF2
  3040                           indf0	equ	0xFEF
  3041                           postinc0	equ	0xFEE
  3042                           fsr0h	equ	0xFEA
  3043                           fsr0l	equ	0xFE9
  3044                           wreg	equ	0xFE8
  3045                           indf2	equ	0xFDF
  3046                           postinc2	equ	0xFDE
  3047                           postdec2	equ	0xFDD
  3048                           fsr2h	equ	0xFDA
  3049                           fsr2l	equ	0xFD9
  3050                           status	equ	0xFD8
  3051                           
  3052                           	psect	rparam
  3053  0000                     tblptru	equ	0xFF8
  3054                           tblptrh	equ	0xFF7
  3055                           tblptrl	equ	0xFF6
  3056                           tablat	equ	0xFF5
  3057                           prodh	equ	0xFF4
  3058                           prodl	equ	0xFF3
  3059                           intcon	equ	0xFF2
  3060                           indf0	equ	0xFEF
  3061                           postinc0	equ	0xFEE
  3062                           fsr0h	equ	0xFEA
  3063                           fsr0l	equ	0xFE9
  3064                           wreg	equ	0xFE8
  3065                           indf2	equ	0xFDF
  3066                           postinc2	equ	0xFDE
  3067                           postdec2	equ	0xFDD
  3068                           fsr2h	equ	0xFDA
  3069                           fsr2l	equ	0xFD9
  3070                           status	equ	0xFD8


Data Sizes:
    Strings     181
    Constant    18
    Data        3
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     31      56
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_13(CODE[13]), STR_12(CODE[2]), STR_10(CODE[16]), STR_9(CODE[15]), 
		 -> STR_7(CODE[16]), STR_6(CODE[22]), STR_5(CODE[18]), STR_4(CODE[19]), 
		 -> STR_3(CODE[23]), STR_2(CODE[14]), STR_1(CODE[23]), uartBuffer(COMRAM[8]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_13(CODE[13]), STR_12(CODE[2]), STR_10(CODE[16]), STR_9(CODE[15]), 
		 -> STR_7(CODE[16]), STR_6(CODE[22]), STR_5(CODE[18]), STR_4(CODE[19]), 
		 -> STR_3(CODE[23]), STR_2(CODE[14]), STR_1(CODE[23]), uartBuffer(COMRAM[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 2
		 -> testPWMValue(COMRAM[2]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 2
		 -> testPWMValue(COMRAM[2]), 

    memcpy@s1	PTR const void  size(2) Largest target is 8
		 -> uartBuffer(COMRAM[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 8
		 -> uartBuffer(COMRAM[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[3]), STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> uartBuffer(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__memcpy	PTR void  size(2) Largest target is 2
		 -> testPWMValue(COMRAM[2]), 

    debug@str	PTR unsigned char  size(2) Largest target is 23
		 -> STR_13(CODE[13]), STR_12(CODE[2]), STR_10(CODE[16]), STR_9(CODE[15]), 
		 -> STR_7(CODE[16]), STR_6(CODE[22]), STR_5(CODE[18]), STR_4(CODE[19]), 
		 -> STR_3(CODE[23]), STR_2(CODE[14]), STR_1(CODE[23]), uartBuffer(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_eeprom_test
    _getPWMvalue->_sprintf
    _processSerialData->_debug
    _eeprom_test->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _changeMode->_debug
    _debug->_strlen
    _debug->_uart_send_byte
    _uart_send_byte->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   26516
                         _changeMode
                              _delay
                        _eeprom_test
                        _eusart_init
                  _processSerialData
                      _state_machine
 ---------------------------------------------------------------------------------
 (1) _state_machine                                        0     0      0   10970
                        _getPWMvalue
 ---------------------------------------------------------------------------------
 (2) _getPWMvalue                                          0     0      0   10970
                              _debug
                              _delay
                             _memcpy
                  _processSerialData
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _processSerialData                                    0     0      0    4396
                              _debug
                              _delay
                     _uart_recv_byte
 ---------------------------------------------------------------------------------
 (4) _uart_recv_byte                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     371
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _eusart_init                                          8     1      7     250
                                              0 COMRAM     8     1      7
 ---------------------------------------------------------------------------------
 (1) _eeprom_test                                          4     4      0    6504
                                             27 COMRAM     4     4      0
                              _debug
                              _delay
                 _eeprom_read_custom
                _eeprom_write_custom
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             24    18      6    1807
                                             12 COMRAM    15     9      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _eeprom_write_custom                                  3     1      2     120
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _eeprom_read_custom                                   1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _changeMode                                           0     0      0    3361
                              _debug
 ---------------------------------------------------------------------------------
 (4) _debug                                                8     6      2    3361
                                              6 COMRAM     8     6      2
                              _delay
                             _strlen
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (5) _uart_send_byte                                       1     1      0    1057
                                              5 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                5     3      2    1035
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _changeMode
     _debug
       _delay
       _strlen
       _uart_send_byte
         _delay
   _delay
   _eeprom_test
     _debug
       _delay
       _strlen
       _uart_send_byte
         _delay
     _delay
     _eeprom_read_custom
     _eeprom_write_custom
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _eusart_init
   _processSerialData
     _debug
       _delay
       _strlen
       _uart_send_byte
         _delay
     _delay
     _uart_recv_byte
   _state_machine
     _getPWMvalue
       _debug
         _delay
         _strlen
         _uart_send_byte
           _delay
       _delay
       _memcpy
       _processSerialData
         _debug
           _delay
           _strlen
           _uart_send_byte
             _delay
         _delay
         _uart_recv_byte
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1F      38       1       58.9%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      38       5        0.0%
DATA                 0      0      38      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Jul 28 21:48:58 2017

                          l93 0B9E                            _ch 0036                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
        ?_eeprom_write_custom 0001                   __CFG_LVP$ON 000000                           l150 0BA4  
                         l143 0B0A                           l235 0B78                           l156 0BD0  
                         l257 0426                           l685 09EC                           l695 0AC4  
                __CFG_CPB$OFF 000000                           _PR2 000FCB                           u520 0A24  
                __CFG_CPD$OFF 000000                           u540 081C                           u527 0A1A  
                         u547 0812                           u680 078C                           _ch2 0026  
                         _ptr 0024                  __CFG_BORV$45 000000                           wreg 000FE8  
                __CFG_IESO$ON 000000                  eeprom_test@i 001E                    Load_Base@i 002B  
                        l1410 0ABA                          l1402 0A9A                          l1340 0B42  
                        l1404 0AA2                          l1420 070E                          l1342 0B46  
                        l1406 0AA6                          l1430 0734                          l1352 0A00  
                        l1512 046E                          l1432 073C                          l1424 071E  
                        l1354 0A04                          l1514 0472                          l1372 0830  
                        l1700 093C                          l1508 0454                          l1620 0600  
                        l1460 07AA                          l1366 07F0                          l1382 09BA  
                        l1550 04FA                          l1526 049E                          l1542 04CE  
                        l1462 07AE                          l1446 0766                          l1454 077C  
                        l1710 0B94                          l1384 09C2                          l1552 0500  
                        l1560 058A                          l1528 04A2                          l1544 04DE  
                        l1640 064C                          l1624 0610                          l1608 0B1E  
                        l1472 0A5A                          l1480 0A7A                          l1704 0B84  
                        l1394 09E2                          l1386 09C6                          l1554 0544  
                        l1562 059A                          l1570 05CA                          l1490 03EE  
                        l1722 08B4                          l1492 03F4                          l1484 03D4  
                        l1652 0680                          l1708 0B8A                          l1566 05AA  
                        l1670 06DC                          l1680 08E8                          l1496 03F8  
                        l1568 05B2                          l1648 0670                          l1690 0912  
                        _CFGS 007D36                          STR_1 0313                          STR_2 03A5  
                        STR_3 0313                          STR_4 0340                          STR_5 0353  
                        STR_6 032A                          STR_7 0386                          STR_8 03C0  
                        STR_9 0396                          _RCIF 007CF5         eusart_init@usart_mode 0008  
                        _TXIF 007CF4                 __CFG_FCMEN$ON 000000                 _state_machine 0B82  
                        _main 0858                          fsr0h 000FEA                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr2l 000FD9                          prodh 000FF4                          prodl 000FF3  
                        start 0002               eusart_init@baud 0006               eusart_init@fosc 0002  
            ??_uart_recv_byte 0001                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
            ??_uart_send_byte 0006                 eeprom_test@ch 001C         ??_eeprom_write_custom 0003  
                       ?_main 0001                         _EEADR 000FA9                         STR_10 0376  
                       STR_11 03C5                         STR_12 0384                         STR_13 03B3  
                       STR_14 0365                         _BRG16 007D53                         _EEPGD 007D37  
                       _T2CON 000FCA               __end_of___lwdiv 09F6               __end_of___lwmod 0ACE  
                       _RCREG 000FAE                         _RCSTA 000FAB                         _SPBRG 000FAF  
                       _PTMRH 000F7C                         _PTMRL 000F7D                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TXREG 000FAD                         _TXSTA 000FAC                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _debug 07C2  
                       _delay 0B30               __end_of_dpowers 030B                  ?_eusart_init 0001  
                       _state 0028                __CFG_BOREN$OFF 000000                         tablat 000FF5  
              ?_state_machine 0001   __size_of_eeprom_read_custom 0016                         status 000FD8  
             __end_of_sprintf 05D8               __initialization 0ACE                __CFG_HPOL$HIGH 000000  
                __end_of_main 08CE          __size_of_getPWMvalue 0062                __CFG_OSC$IRCIO 000000  
              __CFG_LPOL$HIGH 000000                        ??_main 0020                 __activetblptr 000002  
     eeprom_write_custom@badd 0003       eeprom_write_custom@data 0001                        ?_debug 0007  
                      ?_delay 0001                        _EEDATA 000FA8                        _CCPR2L 000FBB  
                      _EECON2 000FA7                __CFG_WDTEN$OFF 000000                        _OSCCON 000FD3  
                      _PTCON0 000F7F                        _PTCON1 000F7E                __CFG_WINEN$OFF 000000  
                      _PTPERH 000F7A                        _PTPERL 000F7B                        _TRISC6 007CA6  
                      _TRISC7 007CA7                __CFG_SSPMX$RC7 000000          __size_of_eeprom_test 011E  
              __CFG_STVREN$ON 000000                     ??___lwdiv 0005                     ??___lwmod 000C  
                      debug@i 000D                        _memcpy 0A48                        delay@i 0004  
                      clear_0 0AF2                        _strlen 09F6                  __pdataCOMRAM 0036  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_sprintf 0013               ??_state_machine 001C  
                  __accesstop 0060       __end_of__initialization 0AF8               __CFG_FLTAMX$RC1 000000  
               ___rparam_used 000001               __CFG_T1OSCMX$ON 000000                __pcstackCOMRAM 0001  
               __end_of_debug 0858                 __end_of_delay 0B5C                       ??_debug 0009  
                     ??_delay 0003            eeprom_test@address 001D                    _changeMode 08CE  
        __size_of_eusart_init 002E               __CFG_WDPS$32768 000000                       _CCP2CON 000FBA  
                     ?_memcpy 0001                       _BAUDCTL 000FAA                       ?_strlen 0001  
             __CFG_PWM4MX$RB5 000000            Load_Base@direction 0038                       _PWMCON0 000F6F  
             __CFG_PWMPIN$OFF 000000               __CFG_PWRTEN$OFF 000000                       __Hparam 0000  
                     __Lparam 0000   __end_of_eeprom_write_custom 0B82                       ___lwdiv 09A4  
                     ___lwmod 0A8C                  __psmallconst 0300                       __pcinit 0ACE  
             __size_of_memcpy 0044                       __ramtop 0300                       __ptext0 0858  
                     __ptext1 0B82                       __ptext2 0942                       __ptext3 06F6  
                     __ptext4 0BD0                       __ptext5 0A48                       __ptext6 0B02  
                     __ptext7 05D8                       __ptext8 03CA                       __ptext9 0A8C  
             __size_of_strlen 0052             __end_of_hexpowers 0313                       _dpowers 0301  
                  delay@count 0001                       _recvIdx 0022    __end_of_eeprom_read_custom 0BD0  
                     _sprintf 03CA          end_of_initialization 0AF8                   ?_changeMode 0001  
                     memcpy@d 0007                       memcpy@n 0005                       memcpy@s 0009  
               __Lmediumconst 0000                 ??_getPWMvalue 001C                    _uartBuffer 002C  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                     strlen@s 0001                     _PORTAbits 000F80       __size_of_uart_recv_byte 000C  
     __size_of_uart_send_byte 0018            eusart_init@tx_mode 0001                 ??_eeprom_test 001C  
            __CFG_EXCLKMX$RC3 000000           __end_of_getPWMvalue 09A4                 __pidataCOMRAM 0BDC  
         __size_of_changeMode 0074                __end_of_memcpy 0A8C                __end_of_strlen 0A48  
         start_initialization 0ACE            uart_recv_byte@flag 0001         __end_of_state_machine 0BA2  
              Load_Base@value 0037           __end_of_eeprom_test 06F6                      ??_memcpy 0007  
                    ??_strlen 0003                   __pbssCOMRAM 0020                 ??_eusart_init 0008  
                 sprintf@flag 0018                   sprintf@prec 0017             _processSerialData 06F6  
            ___lwdiv@dividend 0001                   _getPWMvalue 0942            ?_processSerialData 0001  
                    ?___lwdiv 0001                      ?___lwmod 0008        eeprom_read_custom@badd 0001  
         ??_processSerialData 000F                _uart_recv_byte 0BD0                   __smallconst 0300  
              _uart_send_byte 0BA2                     _currState 002A                     _hexpowers 030B  
            ___lwdiv@quotient 0005                __size_of_debug 0096                __size_of_delay 002C  
                    ?_sprintf 000D                  ??_changeMode 000F     __end_of_processSerialData 07C2  
                 _eeprom_test 05D8           __end_of_eusart_init 0B30            _eeprom_read_custom 0BBA  
                   _prevState 0029        __end_of_uart_recv_byte 0BDC           ?_eeprom_read_custom 0001  
      __end_of_uart_send_byte 0BBA  __size_of_eeprom_write_custom 0026            __end_of_changeMode 0942  
        ??_eeprom_read_custom 0001            uart_send_byte@byte 0006                    _EECON1bits 000FA6  
                    __Hrparam 0000                     memcpy@tmp 000B                      __Lrparam 0000  
             ?_uart_recv_byte 0001              __size_of___lwdiv 0052              __size_of___lwmod 0042  
             ?_uart_send_byte 0001                    sprintf@idx 0014                    sprintf@val 0019  
             ___lwdiv@divisor 0003               ___lwdiv@counter 0007                      __ptext10 09A4  
                    __ptext11 0B5C                      __ptext12 0BBA                      __ptext13 08CE  
                    __ptext14 07C2                      __ptext15 0BA2                      __ptext16 0B30  
                    __ptext17 09F6                   _eusart_init 0B02              __size_of_sprintf 020E  
                    _readByte 0020                      debug@len 000B    __size_of_processSerialData 00CC  
                    debug@str 0007                 __size_of_main 0076                  _testPWMValue 0034  
                  _INTCONbits 000FF2                      memcpy@d1 0001                      memcpy@s1 0003  
                   sprintf@ap 0015                     sprintf@sp 000D              ___lwmod@dividend 0008  
                ?_getPWMvalue 0001        __size_of_state_machine 0020                      sprintf@c 001B  
                    sprintf@f 000F               ___lwmod@divisor 000A             state_machine@flag 0027  
                    strlen@cp 0005               ___lwmod@counter 000C           _eeprom_write_custom 0B5C  
                ?_eeprom_test 0001  
