

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jul 24 23:41:21 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28  0000                     
    29                           ; Version 1.42
    30                           ; Generated 13/04/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4431 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  000970                     __pidataCOMRAM:
    66                           	opt stack 0
    67                           
    68                           ;initializer for _ch
    69  000970  7A                 	db	122
    70                           
    71                           ;initializer for Load_Base@value
    72  000971  05                 	db	5
    73                           
    74                           ;initializer for Load_Base@direction
    75  000972  01                 	db	1
    76                           
    77                           	psect	smallconst
    78  000300                     __psmallconst:
    79                           	opt stack 0
    80  000300  00                 	db	0
    81  000301                     _dpowers:
    82                           	opt stack 0
    83  000301  0001               	dw	1
    84  000303  000A               	dw	10
    85  000305  0064               	dw	100
    86  000307  03E8               	dw	1000
    87  000309  2710               	dw	10000
    88  00030B                     __end_of_dpowers:
    89                           	opt stack 0
    90  0000                     _RCREG	set	4014
    91  0000                     _TXREG	set	4013
    92  0000                     _RCSTA	set	4011
    93  0000                     _TXSTA	set	4012
    94  0000                     _SPBRG	set	4015
    95  0000                     _BAUDCTL	set	4010
    96  0000                     _PORTAbits	set	3968
    97  0000                     _PTCON1	set	3966
    98  0000                     _PTMRH	set	3964
    99  0000                     _PTMRL	set	3965
   100  0000                     _PTPERH	set	3962
   101  0000                     _PTPERL	set	3963
   102  0000                     _PTCON0	set	3967
   103  0000                     _PWMCON0	set	3951
   104  0000                     _T2CON	set	4042
   105  0000                     _PR2	set	4043
   106  0000                     _OSCCON	set	4051
   107  0000                     _TRISD	set	3989
   108  0000                     _TRISC	set	3988
   109  0000                     _TRISB	set	3987
   110  0000                     _TRISA	set	3986
   111  0000                     _CCP2CON	set	4026
   112  0000                     _CCPR2L	set	4027
   113  0000                     _RCIF	set	31989
   114  0000                     _TXIF	set	31988
   115  0000                     _BRG16	set	32083
   116  0000                     _TRISC7	set	31911
   117  0000                     _TRISC6	set	31910
   118  00030B                     STR_1:
   119  00030B  63                 	db	99	;'c'
   120  00030C  68                 	db	104	;'h'
   121  00030D  61                 	db	97	;'a'
   122  00030E  6E                 	db	110	;'n'
   123  00030F  67                 	db	103	;'g'
   124  000310  65                 	db	101	;'e'
   125  000311  20                 	db	32
   126  000312  74                 	db	116	;'t'
   127  000313  6F                 	db	111	;'o'
   128  000314  20                 	db	32
   129  000315  64                 	db	100	;'d'
   130  000316  65                 	db	101	;'e'
   131  000317  66                 	db	102	;'f'
   132  000318  61                 	db	97	;'a'
   133  000319  75                 	db	117	;'u'
   134  00031A  6C                 	db	108	;'l'
   135  00031B  74                 	db	116	;'t'
   136  00031C  20                 	db	32
   137  00031D  6D                 	db	109	;'m'
   138  00031E  6F                 	db	111	;'o'
   139  00031F  64                 	db	100	;'d'
   140  000320  65                 	db	101	;'e'
   141  000321  00                 	db	0
   142  000322                     STR_6:
   143  000322  47                 	db	71	;'G'
   144  000323  6F                 	db	111	;'o'
   145  000324  69                 	db	105	;'i'
   146  000325  6E                 	db	110	;'n'
   147  000326  67                 	db	103	;'g'
   148  000327  20                 	db	32
   149  000328  74                 	db	116	;'t'
   150  000329  6F                 	db	111	;'o'
   151  00032A  20                 	db	32
   152  00032B  44                 	db	68	;'D'
   153  00032C  65                 	db	101	;'e'
   154  00032D  66                 	db	102	;'f'
   155  00032E  61                 	db	97	;'a'
   156  00032F  75                 	db	117	;'u'
   157  000330  6C                 	db	108	;'l'
   158  000331  74                 	db	116	;'t'
   159  000332  20                 	db	32
   160  000333  4D                 	db	77	;'M'
   161  000334  6F                 	db	111	;'o'
   162  000335  64                 	db	100	;'d'
   163  000336  65                 	db	101	;'e'
   164  000337  00                 	db	0
   165  000338                     STR_4:
   166  000338  65                 	db	101	;'e'
   167  000339  6E                 	db	110	;'n'
   168  00033A  74                 	db	116	;'t'
   169  00033B  65                 	db	101	;'e'
   170  00033C  72                 	db	114	;'r'
   171  00033D  69                 	db	105	;'i'
   172  00033E  6E                 	db	110	;'n'
   173  00033F  67                 	db	103	;'g'
   174  000340  20                 	db	32
   175  000341  74                 	db	116	;'t'
   176  000342  65                 	db	101	;'e'
   177  000343  73                 	db	115	;'s'
   178  000344  74                 	db	116	;'t'
   179  000345  20                 	db	32
   180  000346  6D                 	db	109	;'m'
   181  000347  6F                 	db	111	;'o'
   182  000348  64                 	db	100	;'d'
   183  000349  65                 	db	101	;'e'
   184  00034A  00                 	db	0
   185  00034B                     STR_5:
   186  00034B  65                 	db	101	;'e'
   187  00034C  6E                 	db	110	;'n'
   188  00034D  74                 	db	116	;'t'
   189  00034E  65                 	db	101	;'e'
   190  00034F  72                 	db	114	;'r'
   191  000350  69                 	db	105	;'i'
   192  000351  6E                 	db	110	;'n'
   193  000352  67                 	db	103	;'g'
   194  000353  20                 	db	32
   195  000354  73                 	db	115	;'s'
   196  000355  65                 	db	101	;'e'
   197  000356  74                 	db	116	;'t'
   198  000357  20                 	db	32
   199  000358  6D                 	db	109	;'m'
   200  000359  6F                 	db	111	;'o'
   201  00035A  64                 	db	100	;'d'
   202  00035B  65                 	db	101	;'e'
   203  00035C  00                 	db	0
   204  00035D                     STR_7:
   205  00035D  45                 	db	69	;'E'
   206  00035E  6E                 	db	110	;'n'
   207  00035F  74                 	db	116	;'t'
   208  000360  65                 	db	101	;'e'
   209  000361  72                 	db	114	;'r'
   210  000362  20                 	db	32
   211  000363  50                 	db	80	;'P'
   212  000364  57                 	db	87	;'W'
   213  000365  4D                 	db	77	;'M'
   214  000366  20                 	db	32
   215  000367  56                 	db	86	;'V'
   216  000368  61                 	db	97	;'a'
   217  000369  6C                 	db	108	;'l'
   218  00036A  75                 	db	117	;'u'
   219  00036B  65                 	db	101	;'e'
   220  00036C  00                 	db	0
   221  00036D                     STR_2:
   222  00036D  49                 	db	73	;'I'
   223  00036E  6E                 	db	110	;'n'
   224  00036F  76                 	db	118	;'v'
   225  000370  61                 	db	97	;'a'
   226  000371  6C                 	db	108	;'l'
   227  000372  69                 	db	105	;'i'
   228  000373  64                 	db	100	;'d'
   229  000374  20                 	db	32
   230  000375  64                 	db	100	;'d'
   231  000376  61                 	db	97	;'a'
   232  000377  74                 	db	116	;'t'
   233  000378  61                 	db	97	;'a'
   234  000379  2E                 	db	46
   235  00037A  00                 	db	0
   236  00037B                     STR_8:
   237  00037B  62                 	db	98	;'b'
   238  00037C  3A                 	db	58	;':'
   239  00037D  25                 	db	37
   240  00037E  64                 	db	100	;'d'
   241  00037F  00                 	db	0
   242  0000                     
   243                           ; #config settings
   244  000380  00                 	db	0	; dummy byte at the end
   245  0000                     
   246                           	psect	cinit
   247  00089E                     __pcinit:
   248                           	opt stack 0
   249  00089E                     start_initialization:
   250                           	opt stack 0
   251  00089E                     __initialization:
   252                           	opt stack 0
   253                           
   254                           ; Initialize objects allocated to COMRAM (3 bytes)
   255                           ; load TBLPTR registers with __pidataCOMRAM
   256  00089E  0E70               	movlw	low __pidataCOMRAM
   257  0008A0  6EF6               	movwf	tblptrl,c
   258  0008A2  0E09               	movlw	high __pidataCOMRAM
   259  0008A4  6EF7               	movwf	tblptrh,c
   260  0008A6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   261  0008A8  6EF8               	movwf	tblptru,c
   262  0008AA  0009               	tblrd		*+	;fetch initializer
   263  0008AC  CFF5 F02F          	movff	tablat,__pdataCOMRAM
   264  0008B0  0009               	tblrd		*+	;fetch initializer
   265  0008B2  CFF5 F030          	movff	tablat,__pdataCOMRAM+1
   266  0008B6  0009               	tblrd		*+	;fetch initializer
   267  0008B8  CFF5 F031          	movff	tablat,__pdataCOMRAM+2
   268                           
   269                           ; Clear objects allocated to COMRAM (20 bytes)
   270  0008BC  EE00  F01B         	lfsr	0,__pbssCOMRAM
   271  0008C0  0E14               	movlw	20
   272  0008C2                     clear_0:
   273  0008C2  6AEE               	clrf	postinc0,c
   274  0008C4  06E8               	decf	wreg,f,c
   275  0008C6  E1FD               	bnz	clear_0
   276  0008C8                     end_of_initialization:
   277                           	opt stack 0
   278  0008C8                     __end_of__initialization:
   279                           	opt stack 0
   280  0008C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   281  0008CA  6EF8               	movwf	tblptru,c
   282  0008CC  0100               	movlb	0
   283  0008CE  EF50  F003         	goto	_main	;jump to C main() function
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	bssCOMRAM
   292  00001B                     __pbssCOMRAM:
   293                           	opt stack 0
   294  00001B                     _recvIdx:
   295                           	opt stack 0
   296  00001B                     	ds	2
   297  00001D                     _ptr:
   298                           	opt stack 0
   299  00001D                     	ds	2
   300  00001F                     _ch2:
   301                           	opt stack 0
   302  00001F                     	ds	1
   303  000020                     state_machine@flag:
   304                           	opt stack 0
   305  000020                     	ds	1
   306  000021                     _state:
   307                           	opt stack 0
   308  000021                     	ds	1
   309  000022                     _prevState:
   310                           	opt stack 0
   311  000022                     	ds	1
   312  000023                     _currState:
   313                           	opt stack 0
   314  000023                     	ds	1
   315  000024                     	ds	1
   316  000025                     _uartBuffer:
   317                           	opt stack 0
   318  000025                     	ds	8
   319  00002D                     _testPWMValue:
   320                           	opt stack 0
   321  00002D                     	ds	2
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	dataCOMRAM
   330  00002F                     __pdataCOMRAM:
   331                           	opt stack 0
   332  00002F                     _ch:
   333                           	opt stack 0
   334  00002F                     	ds	1
   335  000030                     Load_Base@value:
   336                           	opt stack 0
   337  000030                     	ds	1
   338  000031                     Load_Base@direction:
   339                           	opt stack 0
   340  000031                     	ds	1
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           
   348                           	psect	cstackCOMRAM
   349  000001                     __pcstackCOMRAM:
   350                           	opt stack 0
   351  000001                     ?_strlen:
   352                           	opt stack 0
   353  000001                     ?___lwdiv:
   354                           	opt stack 0
   355  000001                     eusart_init@tx_mode:
   356                           	opt stack 0
   357  000001                     delay@count:
   358                           	opt stack 0
   359  000001                     ___lwdiv@dividend:
   360                           	opt stack 0
   361  000001                     memcpy@d1:
   362                           	opt stack 0
   363  000001                     strlen@s:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x0
   367  000001                     	ds	1
   368  000002                     eusart_init@fosc:
   369                           	opt stack 0
   370                           
   371                           ; 4 bytes @ 0x1
   372  000002                     	ds	1
   373  000003                     ??_strlen:
   374  000003                     ??_delay:
   375  000003                     ___lwdiv@divisor:
   376                           	opt stack 0
   377  000003                     memcpy@s1:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x2
   381  000003                     	ds	1
   382  000004                     delay@i:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x3
   386  000004                     	ds	1
   387  000005                     ___lwdiv@quotient:
   388                           	opt stack 0
   389  000005                     memcpy@n:
   390                           	opt stack 0
   391  000005                     strlen@cp:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x4
   395  000005                     	ds	1
   396  000006                     uart_send_byte@byte:
   397                           	opt stack 0
   398  000006                     eusart_init@baud:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x5
   402  000006                     	ds	1
   403  000007                     ___lwdiv@counter:
   404                           	opt stack 0
   405  000007                     debug@str:
   406                           	opt stack 0
   407  000007                     memcpy@d:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x6
   411  000007                     	ds	1
   412  000008                     ?___lwmod:
   413                           	opt stack 0
   414  000008                     eusart_init@usart_mode:
   415                           	opt stack 0
   416  000008                     ___lwmod@dividend:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x7
   420  000008                     	ds	1
   421  000009                     ??_debug:
   422  000009                     memcpy@s:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x8
   426  000009                     	ds	1
   427  00000A                     ___lwmod@divisor:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x9
   431  00000A                     	ds	1
   432  00000B                     memcpy@tmp:
   433                           	opt stack 0
   434  00000B                     debug@len:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0xA
   438  00000B                     	ds	1
   439  00000C                     ___lwmod@counter:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0xB
   443  00000C                     	ds	1
   444  00000D                     ?_sprintf:
   445                           	opt stack 0
   446  00000D                     debug@i:
   447                           	opt stack 0
   448  00000D                     sprintf@sp:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0xC
   452  00000D                     	ds	2
   453  00000F                     sprintf@f:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0xE
   457  00000F                     	ds	4
   458  000013                     ??_sprintf:
   459                           
   460                           ; 1 bytes @ 0x12
   461  000013                     	ds	1
   462  000014                     sprintf@ap:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x13
   466  000014                     	ds	2
   467  000016                     sprintf@flag:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x15
   471  000016                     	ds	1
   472  000017                     sprintf@prec:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x16
   476  000017                     	ds	1
   477  000018                     sprintf@val:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x17
   481  000018                     	ds	2
   482  00001A                     sprintf@c:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x19
   486  00001A                     	ds	1
   487  00001B                     tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           postinc0	equ	0xFEE
   492                           wreg	equ	0xFE8
   493                           
   494                           ; 1 bytes @ 0x1A
   495 ;;
   496 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   497 ;;
   498 ;; *************** function _main *****************
   499 ;; Defined at:
   500 ;;		line 100 in file "main.c"
   501 ;; Parameters:    Size  Location     Type
   502 ;;		None
   503 ;; Auto vars:     Size  Location     Type
   504 ;;  ch              1    0        unsigned char 
   505 ;; Return value:  Size  Location     Type
   506 ;;                  1    wreg      void 
   507 ;; Registers used:
   508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   509 ;; Tracked objects:
   510 ;;		On entry : 0/0
   511 ;;		On exit  : 0/0
   512 ;;		Unchanged: 0/0
   513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   514 ;;      Params:         0       0       0       0
   515 ;;      Locals:         0       0       0       0
   516 ;;      Temps:          0       0       0       0
   517 ;;      Totals:         0       0       0       0
   518 ;;Total ram usage:        0 bytes
   519 ;; Hardware stack levels required when called:    6
   520 ;; This function calls:
   521 ;;		_changeMode
   522 ;;		_delay
   523 ;;		_eusart_init
   524 ;;		_processSerialData
   525 ;;		_state_machine
   526 ;; This function is called by:
   527 ;;		Startup code after reset
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           	psect	text0
   532  0006A0                     __ptext0:
   533                           	opt stack 0
   534  0006A0                     _main:
   535                           	opt stack 25
   536                           
   537                           ;main.c: 102: unsigned char ch;
   538                           ;main.c: 103: TRISA = 0x00;
   539                           
   540                           ;incstack = 0
   541  0006A0  0E00               	movlw	0
   542  0006A2  6E92               	movwf	3986,c	;volatile
   543                           
   544                           ;main.c: 104: TRISB=0X00;
   545  0006A4  0E00               	movlw	0
   546  0006A6  6E93               	movwf	3987,c	;volatile
   547                           
   548                           ;main.c: 105: TRISC=0x00;
   549  0006A8  0E00               	movlw	0
   550  0006AA  6E94               	movwf	3988,c	;volatile
   551                           
   552                           ;main.c: 106: TRISD=0xff;
   553  0006AC  6895               	setf	3989,c	;volatile
   554                           
   555                           ;main.c: 108: OSCCON=0b01110010;
   556  0006AE  0E72               	movlw	114
   557  0006B0  6ED3               	movwf	4051,c	;volatile
   558                           
   559                           ;main.c: 109: PR2=0x9B;
   560  0006B2  0E9B               	movlw	155
   561  0006B4  6ECB               	movwf	4043,c	;volatile
   562                           
   563                           ;main.c: 110: T2CON=0x06;
   564  0006B6  0E06               	movlw	6
   565  0006B8  6ECA               	movwf	4042,c	;volatile
   566                           
   567                           ;main.c: 115: PWMCON0 =0x2f;
   568  0006BA  0E2F               	movlw	47
   569  0006BC  6E6F               	movwf	3951,c	;volatile
   570                           
   571                           ;main.c: 116: PTCON0 =0x00;
   572  0006BE  0E00               	movlw	0
   573  0006C0  6E7F               	movwf	3967,c	;volatile
   574                           
   575                           ;main.c: 117: PTPERL =0xc4;
   576  0006C2  0EC4               	movlw	196
   577  0006C4  6E7B               	movwf	3963,c	;volatile
   578                           
   579                           ;main.c: 118: PTPERH =0x09;
   580  0006C6  0E09               	movlw	9
   581  0006C8  6E7A               	movwf	3962,c	;volatile
   582                           
   583                           ;main.c: 119: PTMRL =0xc4;
   584  0006CA  0EC4               	movlw	196
   585  0006CC  6E7D               	movwf	3965,c	;volatile
   586                           
   587                           ;main.c: 120: PTMRH =0x09;
   588  0006CE  0E09               	movlw	9
   589  0006D0  6E7C               	movwf	3964,c	;volatile
   590                           
   591                           ;main.c: 123: PTCON1 =0x80;
   592  0006D2  0E80               	movlw	128
   593  0006D4  6E7E               	movwf	3966,c	;volatile
   594                           
   595                           ;main.c: 125: eusart_init(0, 0, 8000000UL, 9600);
   596  0006D6  0E00               	movlw	0
   597  0006D8  6E01               	movwf	eusart_init@tx_mode,c
   598  0006DA  0E00               	movlw	0
   599  0006DC  6E02               	movwf	eusart_init@fosc,c
   600  0006DE  0E12               	movlw	18
   601  0006E0  6E03               	movwf	eusart_init@fosc+1,c
   602  0006E2  0E7A               	movlw	122
   603  0006E4  6E04               	movwf	eusart_init@fosc+2,c
   604  0006E6  0E00               	movlw	0
   605  0006E8  6E05               	movwf	eusart_init@fosc+3,c
   606  0006EA  0E25               	movlw	37
   607  0006EC  6E07               	movwf	eusart_init@baud+1,c
   608  0006EE  0E80               	movlw	128
   609  0006F0  6E06               	movwf	eusart_init@baud,c
   610  0006F2  0E00               	movlw	0
   611  0006F4  EC69  F004         	call	_eusart_init
   612  0006F8                     l1416:
   613                           
   614                           ;main.c: 127: {
   615                           ;main.c: 133: processSerialData();
   616  0006F8  EC65  F002         	call	_processSerialData	;wreg free
   617                           
   618                           ;main.c: 134: changeMode();
   619  0006FC  EC16  F003         	call	_changeMode	;wreg free
   620                           
   621                           ;main.c: 135: state_machine();
   622  000700  EC96  F004         	call	_state_machine	;wreg free
   623                           
   624                           ;main.c: 137: delay(9000);
   625  000704  0E23               	movlw	35
   626  000706  6E02               	movwf	delay@count+1,c
   627  000708  0E28               	movlw	40
   628  00070A  6E01               	movwf	delay@count,c
   629  00070C  EC80  F004         	call	_delay	;wreg free
   630  000710  D7F3               	goto	l1416
   631  000712                     __end_of_main:
   632                           	opt stack 0
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           
   640 ;; *************** function _state_machine *****************
   641 ;; Defined at:
   642 ;;		line 143 in file "main.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;		None
   645 ;; Auto vars:     Size  Location     Type
   646 ;;		None
   647 ;; Return value:  Size  Location     Type
   648 ;;                  1    wreg      void 
   649 ;; Registers used:
   650 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   651 ;; Tracked objects:
   652 ;;		On entry : 0/0
   653 ;;		On exit  : 0/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   656 ;;      Params:         0       0       0       0
   657 ;;      Locals:         0       0       0       0
   658 ;;      Temps:          0       0       0       0
   659 ;;      Totals:         0       0       0       0
   660 ;;Total ram usage:        0 bytes
   661 ;; Hardware stack levels used:    1
   662 ;; Hardware stack levels required when called:    5
   663 ;; This function calls:
   664 ;;		_getPWMvalue
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text1
   671  00092C                     __ptext1:
   672                           	opt stack 0
   673  00092C                     _state_machine:
   674                           	opt stack 25
   675                           
   676                           ;main.c: 145: static char flag=0;
   677                           ;main.c: 146: switch(state)
   678                           
   679                           ;incstack = 0
   680  00092C  D003               	goto	l1404
   681  00092E                     l1400:
   682                           
   683                           ;main.c: 149: getPWMvalue();
   684  00092E  EC89  F003         	call	_getPWMvalue	;wreg free
   685                           
   686                           ;main.c: 156: }
   687                           
   688                           ;main.c: 155: break;
   689                           
   690                           ;main.c: 154: default:
   691                           
   692                           ;main.c: 152: break;
   693                           
   694                           ;main.c: 151: case 0x02:
   695                           
   696                           ;main.c: 150: break;
   697  000932  D005               	goto	l1406
   698  000934                     l1404:
   699  000934  5021               	movf	_state,w,c
   700                           
   701                           ; Switch size 1, requested type "space"
   702                           ; Number of cases is 2, Range of values is 1 to 2
   703                           ; switch strategies available:
   704                           ; Name         Instructions Cycles
   705                           ; simple_byte            7     4 (average)
   706                           ;	Chosen strategy is simple_byte
   707  000936  0A01               	xorlw	1	; case 1
   708  000938  B4D8               	btfsc	status,2,c
   709  00093A  D7F9               	goto	l1400
   710  00093C  0A03               	xorlw	3	; case 2
   711  00093E                     l1406:
   712                           
   713                           ;main.c: 157: if(flag)
   714  00093E  5020               	movf	state_machine@flag,w,c
   715  000940  B4D8               	btfsc	status,2,c
   716  000942  D002               	goto	l91
   717                           
   718                           ;main.c: 158: PORTAbits.RA1=0b1;
   719  000944  8280               	bsf	3968,1,c	;volatile
   720  000946  0012               	return	
   721  000948                     l91:
   722                           
   723                           ;main.c: 159: else
   724                           ;main.c: 160: PORTAbits.RA1=0b0;
   725  000948  9280               	bcf	3968,1,c	;volatile
   726  00094A  0012               	return	
   727  00094C                     __end_of_state_machine:
   728                           	opt stack 0
   729                           tblptru	equ	0xFF8
   730                           tblptrh	equ	0xFF7
   731                           tblptrl	equ	0xFF6
   732                           tablat	equ	0xFF5
   733                           postinc0	equ	0xFEE
   734                           wreg	equ	0xFE8
   735                           status	equ	0xFD8
   736                           
   737 ;; *************** function _getPWMvalue *****************
   738 ;; Defined at:
   739 ;;		line 133 in file "uart.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   753 ;;      Params:         0       0       0       0
   754 ;;      Locals:         0       0       0       0
   755 ;;      Temps:          0       0       0       0
   756 ;;      Totals:         0       0       0       0
   757 ;;Total ram usage:        0 bytes
   758 ;; Hardware stack levels used:    1
   759 ;; Hardware stack levels required when called:    4
   760 ;; This function calls:
   761 ;;		_debug
   762 ;;		_delay
   763 ;;		_memcpy
   764 ;;		_processSerialData
   765 ;;		_sprintf
   766 ;; This function is called by:
   767 ;;		_state_machine
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text2
   772  000712                     __ptext2:
   773                           	opt stack 0
   774  000712                     _getPWMvalue:
   775                           	opt stack 25
   776                           
   777                           ;uart.c: 135: debug("Enter PWM Value");
   778                           
   779                           ;incstack = 0
   780  000712  0E5D               	movlw	low STR_7
   781  000714  6E07               	movwf	debug@str,c
   782  000716  0E03               	movlw	high STR_7
   783  000718  6E08               	movwf	debug@str+1,c
   784  00071A  ECCB  F002         	call	_debug	;wreg free
   785                           
   786                           ;uart.c: 137: delay(9000);
   787  00071E  0E23               	movlw	35
   788  000720  6E02               	movwf	delay@count+1,c
   789  000722  0E28               	movlw	40
   790  000724  6E01               	movwf	delay@count,c
   791  000726  EC80  F004         	call	_delay	;wreg free
   792                           
   793                           ;uart.c: 138: processSerialData();
   794  00072A  EC65  F002         	call	_processSerialData	;wreg free
   795                           
   796                           ;uart.c: 139: memcpy(&testPWMValue,&uartBuffer[0],4);
   797  00072E  0E2D               	movlw	low _testPWMValue
   798  000730  6E01               	movwf	memcpy@d1,c
   799  000732  0E00               	movlw	high _testPWMValue
   800  000734  6E02               	movwf	memcpy@d1+1,c
   801  000736  0E25               	movlw	low _uartBuffer
   802  000738  6E03               	movwf	memcpy@s1,c
   803  00073A  0E00               	movlw	high _uartBuffer
   804  00073C  6E04               	movwf	memcpy@s1+1,c
   805  00073E  0E00               	movlw	0
   806  000740  6E06               	movwf	memcpy@n+1,c
   807  000742  0E04               	movlw	4
   808  000744  6E05               	movwf	memcpy@n,c
   809  000746  EC0C  F004         	call	_memcpy	;wreg free
   810                           
   811                           ;uart.c: 140: sprintf(uartBuffer,"b:%d",testPWMValue);
   812  00074A  0E25               	movlw	low _uartBuffer
   813  00074C  6E0D               	movwf	sprintf@sp,c
   814  00074E  0E00               	movlw	high _uartBuffer
   815  000750  6E0E               	movwf	sprintf@sp+1,c
   816  000752  0E7B               	movlw	low STR_8
   817  000754  6E0F               	movwf	sprintf@f,c
   818  000756  0E03               	movlw	high STR_8
   819  000758  6E10               	movwf	sprintf@f+1,c
   820  00075A  C02D  F011         	movff	_testPWMValue,?_sprintf+4
   821  00075E  C02E  F012         	movff	_testPWMValue+1,?_sprintf+5
   822  000762  ECC1  F001         	call	_sprintf	;wreg free
   823                           
   824                           ;uart.c: 141: debug(uartBuffer);
   825  000766  0E25               	movlw	low _uartBuffer
   826  000768  6E07               	movwf	debug@str,c
   827  00076A  0E00               	movlw	high _uartBuffer
   828  00076C  6E08               	movwf	debug@str+1,c
   829  00076E  ECCB  F002         	call	_debug	;wreg free
   830  000772  0012               	return		;funcret
   831  000774                     __end_of_getPWMvalue:
   832                           	opt stack 0
   833                           tblptru	equ	0xFF8
   834                           tblptrh	equ	0xFF7
   835                           tblptrl	equ	0xFF6
   836                           tablat	equ	0xFF5
   837                           postinc0	equ	0xFEE
   838                           wreg	equ	0xFE8
   839                           status	equ	0xFD8
   840                           
   841 ;; *************** function _sprintf *****************
   842 ;; Defined at:
   843 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;  sp              2   12[COMRAM] PTR unsigned char 
   846 ;;		 -> uartBuffer(8), 
   847 ;;  f               2   14[COMRAM] PTR const unsigned char 
   848 ;;		 -> STR_8(5), 
   849 ;; Auto vars:     Size  Location     Type
   850 ;;  tmpval          4    0        struct .
   851 ;;  cp              3    0        PTR const unsigned char 
   852 ;;  val             2   23[COMRAM] unsigned int 
   853 ;;  ap              2   19[COMRAM] PTR void [1]
   854 ;;		 -> ?_sprintf(2), 
   855 ;;  len             2    0        unsigned int 
   856 ;;  c               1   25[COMRAM] char 
   857 ;;  prec            1   22[COMRAM] char 
   858 ;;  flag            1   21[COMRAM] unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  2   12[COMRAM] int 
   861 ;; Registers used:
   862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   868 ;;      Params:         6       0       0       0
   869 ;;      Locals:         7       0       0       0
   870 ;;      Temps:          1       0       0       0
   871 ;;      Totals:        14       0       0       0
   872 ;;Total ram usage:       14 bytes
   873 ;; Hardware stack levels used:    1
   874 ;; Hardware stack levels required when called:    1
   875 ;; This function calls:
   876 ;;		___lwdiv
   877 ;;		___lwmod
   878 ;; This function is called by:
   879 ;;		_getPWMvalue
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text3
   884  000382                     __ptext3:
   885                           	opt stack 0
   886  000382                     _sprintf:
   887                           	opt stack 27
   888                           
   889                           ;doprnt.c: 494: va_list ap;
   890                           ;doprnt.c: 499: signed char c;
   891                           ;doprnt.c: 506: signed char prec;
   892                           ;doprnt.c: 508: unsigned char flag;
   893                           ;doprnt.c: 523: union {
   894                           ;doprnt.c: 524: unsigned long vd;
   895                           ;doprnt.c: 525: double integ;
   896                           ;doprnt.c: 526: } tmpval;
   897                           ;doprnt.c: 528: unsigned int val;
   898                           ;doprnt.c: 529: unsigned len;
   899                           ;doprnt.c: 530: const char * cp;
   900                           ;doprnt.c: 533: *ap = __va_start();
   901                           
   902                           ;incstack = 0
   903  000382  0E11               	movlw	low (?_sprintf+4)
   904  000384  6E14               	movwf	sprintf@ap,c
   905  000386  0E00               	movlw	high (?_sprintf+4)
   906  000388  6E15               	movwf	sprintf@ap+1,c
   907                           
   908                           ;doprnt.c: 536: while(c = *f++) {
   909  00038A  D08C               	goto	l1346
   910  00038C                     l1294:
   911                           
   912                           ;doprnt.c: 538: if(c != '%')
   913  00038C  0E25               	movlw	37
   914  00038E  181A               	xorwf	sprintf@c,w,c
   915  000390  B4D8               	btfsc	status,2,c
   916  000392  D009               	goto	l1300
   917                           
   918                           ;doprnt.c: 540: {
   919                           ;doprnt.c: 541: ((*sp++ = (c)));
   920  000394  C00D  FFD9         	movff	sprintf@sp,fsr2l
   921  000398  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   922  00039C  C01A  FFDF         	movff	sprintf@c,indf2
   923  0003A0  4A0D               	infsnz	sprintf@sp,f,c
   924  0003A2  2A0E               	incf	sprintf@sp+1,f,c
   925                           
   926                           ;doprnt.c: 542: continue;
   927  0003A4  D07F               	goto	l1346
   928  0003A6                     l1300:
   929                           
   930                           ;doprnt.c: 543: }
   931                           ;doprnt.c: 548: flag = 0;
   932  0003A6  0E00               	movlw	0
   933  0003A8  6E16               	movwf	sprintf@flag,c
   934                           
   935                           ;doprnt.c: 822: }
   936                           
   937                           ;doprnt.c: 813: continue;
   938                           
   939                           ;doprnt.c: 802: default:
   940                           
   941                           ;doprnt.c: 698: case 'i':
   942                           ;doprnt.c: 699: break;
   943                           
   944                           ;doprnt.c: 697: case 'd':
   945                           
   946                           ;doprnt.c: 638: goto alldone;
   947                           
   948                           ;doprnt.c: 637: case 0:
   949                           
   950                           ;doprnt.c: 635: switch(c = *f++) {
   951  0003AA  C00F  FFF6         	movff	sprintf@f,tblptrl
   952  0003AE  C010  FFF7         	movff	sprintf@f+1,tblptrh
   953  0003B2  4A0F               	infsnz	sprintf@f,f,c
   954  0003B4  2A10               	incf	sprintf@f+1,f,c
   955  0003B6                     	if	0	;tblptru may be non-zero
   956  0003B6                     	endif
   957  0003B6                     	if	0	;tblptru may be non-zero
   958  0003B6                     	endif
   959  0003B6  0008               	tblrd		*
   960  0003B8  CFF5 F01A          	movff	tablat,sprintf@c
   961  0003BC  501A               	movf	sprintf@c,w,c
   962                           
   963                           ; Switch size 1, requested type "space"
   964                           ; Number of cases is 3, Range of values is 0 to 105
   965                           ; switch strategies available:
   966                           ; Name         Instructions Cycles
   967                           ; simple_byte           10     6 (average)
   968                           ;	Chosen strategy is simple_byte
   969  0003BE  0A00               	xorlw	0	; case 0
   970  0003C0  B4D8               	btfsc	status,2,c
   971  0003C2  D07C               	goto	l1348
   972  0003C4  0A64               	xorlw	100	; case 100
   973  0003C6  B4D8               	btfsc	status,2,c
   974  0003C8  D003               	goto	l1306
   975  0003CA  0A0D               	xorlw	13	; case 105
   976  0003CC  A4D8               	btfss	status,2,c
   977  0003CE  D06A               	goto	l1346
   978  0003D0                     l1306:
   979                           
   980                           ;doprnt.c: 1253: {
   981                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   982  0003D0  C014  FFD9         	movff	sprintf@ap,fsr2l
   983  0003D4  C015  FFDA         	movff	sprintf@ap+1,fsr2h
   984  0003D8  CFDE F018          	movff	postinc2,sprintf@val
   985  0003DC  CFDD F019          	movff	postdec2,sprintf@val+1
   986  0003E0  0E02               	movlw	2
   987  0003E2  2614               	addwf	sprintf@ap,f,c
   988  0003E4  0E00               	movlw	0
   989  0003E6  2215               	addwfc	sprintf@ap+1,f,c
   990                           
   991                           ;doprnt.c: 1261: if((int)val < 0) {
   992  0003E8  AE19               	btfss	sprintf@val+1,7,c
   993  0003EA  D006               	goto	l1316
   994                           
   995                           ;doprnt.c: 1262: flag |= 0x03;
   996  0003EC  0E03               	movlw	3
   997  0003EE  1216               	iorwf	sprintf@flag,f,c
   998                           
   999                           ;doprnt.c: 1263: val = -val;
  1000  0003F0  6C18               	negf	sprintf@val,c
  1001  0003F2  1E19               	comf	sprintf@val+1,f,c
  1002  0003F4  B0D8               	btfsc	status,0,c
  1003  0003F6  2A19               	incf	sprintf@val+1,f,c
  1004  0003F8                     l1316:
  1005                           
  1006                           ;doprnt.c: 1264: }
  1007                           ;doprnt.c: 1266: }
  1008                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1009  0003F8  0E01               	movlw	1
  1010  0003FA  6E1A               	movwf	sprintf@c,c
  1011  0003FC                     l1318:
  1012  0003FC  0E05               	movlw	5
  1013  0003FE  181A               	xorwf	sprintf@c,w,c
  1014  000400  B4D8               	btfsc	status,2,c
  1015  000402  D012               	goto	l1330
  1016                           
  1017                           ;doprnt.c: 1306: if(val < dpowers[c])
  1018  000404  501A               	movf	sprintf@c,w,c
  1019  000406  0D02               	mullw	2
  1020  000408  0E01               	movlw	low _dpowers
  1021  00040A  24F3               	addwf	prodl,w,c
  1022  00040C  6EF6               	movwf	tblptrl,c
  1023  00040E  0E03               	movlw	high _dpowers
  1024  000410  20F4               	addwfc	prodh,w,c
  1025  000412  6EF7               	movwf	tblptrh,c
  1026  000414                     	if	0	;There are less than 3 active tblptr bytes
  1027  000414                     	endif
  1028  000414  0009               	tblrd		*+
  1029  000416  50F5               	movf	tablat,w,c
  1030  000418  5C18               	subwf	sprintf@val,w,c
  1031  00041A  0009               	tblrd		*+
  1032  00041C  50F5               	movf	tablat,w,c
  1033  00041E  5819               	subwfb	sprintf@val+1,w,c
  1034  000420  A0D8               	btfss	status,0,c
  1035  000422  D002               	goto	l1330
  1036                           
  1037                           ;doprnt.c: 1307: break;
  1038  000424  2A1A               	incf	sprintf@c,f,c
  1039  000426  D7EA               	goto	l1318
  1040  000428                     l1330:
  1041                           
  1042                           ;doprnt.c: 1422: {
  1043                           ;doprnt.c: 1438: if(flag & 0x03)
  1044  000428  C016  F013         	movff	sprintf@flag,??_sprintf
  1045  00042C  0E03               	movlw	3
  1046  00042E  1613               	andwf	??_sprintf,f,c
  1047  000430  B4D8               	btfsc	status,2,c
  1048  000432  D008               	goto	l1336
  1049                           
  1050                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1051  000434  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1052  000438  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1053  00043C  0E2D               	movlw	45
  1054  00043E  6EDF               	movwf	indf2,c
  1055  000440  4A0D               	infsnz	sprintf@sp,f,c
  1056  000442  2A0E               	incf	sprintf@sp+1,f,c
  1057  000444                     l1336:
  1058                           
  1059                           ;doprnt.c: 1469: }
  1060                           ;doprnt.c: 1472: prec = c;
  1061  000444  C01A  F017         	movff	sprintf@c,sprintf@prec
  1062                           
  1063                           ;doprnt.c: 1474: while(prec--) {
  1064  000448  D029               	goto	l1344
  1065  00044A                     l1338:
  1066                           
  1067                           ;doprnt.c: 1478: {
  1068                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1069  00044A  5017               	movf	sprintf@prec,w,c
  1070  00044C  0D02               	mullw	2
  1071  00044E  0E01               	movlw	low _dpowers
  1072  000450  24F3               	addwf	prodl,w,c
  1073  000452  6EF6               	movwf	tblptrl,c
  1074  000454  0E03               	movlw	high _dpowers
  1075  000456  20F4               	addwfc	prodh,w,c
  1076  000458  6EF7               	movwf	tblptrh,c
  1077  00045A                     	if	0	;There are less than 3 active tblptr bytes
  1078  00045A                     	endif
  1079  00045A  0009               	tblrd		*+
  1080  00045C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1081  000460  000A               	tblrd		*-
  1082  000462  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1083  000466  C018  F001         	movff	sprintf@val,___lwdiv@dividend
  1084  00046A  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1085  00046E  ECBA  F003         	call	___lwdiv	;wreg free
  1086  000472  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1087  000476  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1088  00047A  0E00               	movlw	0
  1089  00047C  6E0B               	movwf	___lwmod@divisor+1,c
  1090  00047E  0E0A               	movlw	10
  1091  000480  6E0A               	movwf	___lwmod@divisor,c
  1092  000482  EC2E  F004         	call	___lwmod	;wreg free
  1093  000486  5008               	movf	?___lwmod,w,c
  1094  000488  0F30               	addlw	48
  1095  00048A  6E1A               	movwf	sprintf@c,c
  1096                           
  1097                           ;doprnt.c: 1523: }
  1098                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1099  00048C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1100  000490  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1101  000494  C01A  FFDF         	movff	sprintf@c,indf2
  1102  000498  4A0D               	infsnz	sprintf@sp,f,c
  1103  00049A  2A0E               	incf	sprintf@sp+1,f,c
  1104  00049C                     l1344:
  1105  00049C  0617               	decf	sprintf@prec,f,c
  1106  00049E  2817               	incf	sprintf@prec,w,c
  1107  0004A0  A4D8               	btfss	status,2,c
  1108  0004A2  D7D3               	goto	l1338
  1109  0004A4                     l1346:
  1110  0004A4  C00F  FFF6         	movff	sprintf@f,tblptrl
  1111  0004A8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1112  0004AC  4A0F               	infsnz	sprintf@f,f,c
  1113  0004AE  2A10               	incf	sprintf@f+1,f,c
  1114  0004B0                     	if	0	;tblptru may be non-zero
  1115  0004B0                     	endif
  1116  0004B0                     	if	0	;tblptru may be non-zero
  1117  0004B0                     	endif
  1118  0004B0  0008               	tblrd		*
  1119  0004B2  CFF5 F01A          	movff	tablat,sprintf@c
  1120  0004B6  501A               	movf	sprintf@c,w,c
  1121  0004B8  A4D8               	btfss	status,2,c
  1122  0004BA  D768               	goto	l1294
  1123  0004BC                     l1348:
  1124                           
  1125                           ;doprnt.c: 1538: *sp = 0;
  1126  0004BC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1127  0004C0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1128  0004C4  0E00               	movlw	0
  1129  0004C6  6EDF               	movwf	indf2,c
  1130  0004C8  0012               	return	
  1131  0004CA                     __end_of_sprintf:
  1132                           	opt stack 0
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           prodh	equ	0xFF4
  1138                           prodl	equ	0xFF3
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           indf2	equ	0xFDF
  1142                           postinc2	equ	0xFDE
  1143                           postdec2	equ	0xFDD
  1144                           fsr2h	equ	0xFDA
  1145                           fsr2l	equ	0xFD9
  1146                           status	equ	0xFD8
  1147                           
  1148 ;; *************** function ___lwmod *****************
  1149 ;; Defined at:
  1150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;  dividend        2    7[COMRAM] unsigned int 
  1153 ;;  divisor         2    9[COMRAM] unsigned int 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  counter         1   11[COMRAM] unsigned char 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  2    7[COMRAM] unsigned int 
  1158 ;; Registers used:
  1159 ;;		wreg, status,2, status,0
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1165 ;;      Params:         4       0       0       0
  1166 ;;      Locals:         1       0       0       0
  1167 ;;      Temps:          0       0       0       0
  1168 ;;      Totals:         5       0       0       0
  1169 ;;Total ram usage:        5 bytes
  1170 ;; Hardware stack levels used:    1
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_sprintf
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text4
  1179  00085C                     __ptext4:
  1180                           	opt stack 0
  1181  00085C                     ___lwmod:
  1182                           	opt stack 27
  1183                           
  1184                           ;incstack = 0
  1185  00085C  500A               	movf	___lwmod@divisor,w,c
  1186  00085E  100B               	iorwf	___lwmod@divisor+1,w,c
  1187  000860  B4D8               	btfsc	status,2,c
  1188  000862  D018               	goto	l633
  1189  000864  0E01               	movlw	1
  1190  000866  6E0C               	movwf	___lwmod@counter,c
  1191  000868  D004               	goto	l1214
  1192  00086A                     l1212:
  1193  00086A  90D8               	bcf	status,0,c
  1194  00086C  360A               	rlcf	___lwmod@divisor,f,c
  1195  00086E  360B               	rlcf	___lwmod@divisor+1,f,c
  1196  000870  2A0C               	incf	___lwmod@counter,f,c
  1197  000872                     l1214:
  1198  000872  AE0B               	btfss	___lwmod@divisor+1,7,c
  1199  000874  D7FA               	goto	l1212
  1200  000876                     l1216:
  1201  000876  500A               	movf	___lwmod@divisor,w,c
  1202  000878  5C08               	subwf	___lwmod@dividend,w,c
  1203  00087A  500B               	movf	___lwmod@divisor+1,w,c
  1204  00087C  5809               	subwfb	___lwmod@dividend+1,w,c
  1205  00087E  A0D8               	btfss	status,0,c
  1206  000880  D004               	goto	l1220
  1207  000882  500A               	movf	___lwmod@divisor,w,c
  1208  000884  5E08               	subwf	___lwmod@dividend,f,c
  1209  000886  500B               	movf	___lwmod@divisor+1,w,c
  1210  000888  5A09               	subwfb	___lwmod@dividend+1,f,c
  1211  00088A                     l1220:
  1212  00088A  90D8               	bcf	status,0,c
  1213  00088C  320B               	rrcf	___lwmod@divisor+1,f,c
  1214  00088E  320A               	rrcf	___lwmod@divisor,f,c
  1215  000890  2E0C               	decfsz	___lwmod@counter,f,c
  1216  000892  D7F1               	goto	l1216
  1217  000894                     l633:
  1218  000894  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1219  000898  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1220  00089C  0012               	return		;funcret
  1221  00089E                     __end_of___lwmod:
  1222                           	opt stack 0
  1223                           tblptru	equ	0xFF8
  1224                           tblptrh	equ	0xFF7
  1225                           tblptrl	equ	0xFF6
  1226                           tablat	equ	0xFF5
  1227                           prodh	equ	0xFF4
  1228                           prodl	equ	0xFF3
  1229                           postinc0	equ	0xFEE
  1230                           wreg	equ	0xFE8
  1231                           indf2	equ	0xFDF
  1232                           postinc2	equ	0xFDE
  1233                           postdec2	equ	0xFDD
  1234                           fsr2h	equ	0xFDA
  1235                           fsr2l	equ	0xFD9
  1236                           status	equ	0xFD8
  1237                           
  1238 ;; *************** function ___lwdiv *****************
  1239 ;; Defined at:
  1240 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;  dividend        2    0[COMRAM] unsigned int 
  1243 ;;  divisor         2    2[COMRAM] unsigned int 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  quotient        2    4[COMRAM] unsigned int 
  1246 ;;  counter         1    6[COMRAM] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  2    0[COMRAM] unsigned int 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2, status,0
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1256 ;;      Params:         4       0       0       0
  1257 ;;      Locals:         3       0       0       0
  1258 ;;      Temps:          0       0       0       0
  1259 ;;      Totals:         7       0       0       0
  1260 ;;Total ram usage:        7 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_sprintf
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text5
  1270  000774                     __ptext5:
  1271                           	opt stack 0
  1272  000774                     ___lwdiv:
  1273                           	opt stack 27
  1274                           
  1275                           ;incstack = 0
  1276  000774  0E00               	movlw	0
  1277  000776  6E06               	movwf	___lwdiv@quotient+1,c
  1278  000778  0E00               	movlw	0
  1279  00077A  6E05               	movwf	___lwdiv@quotient,c
  1280  00077C  5003               	movf	___lwdiv@divisor,w,c
  1281  00077E  1004               	iorwf	___lwdiv@divisor+1,w,c
  1282  000780  B4D8               	btfsc	status,2,c
  1283  000782  D01C               	goto	l623
  1284  000784  0E01               	movlw	1
  1285  000786  6E07               	movwf	___lwdiv@counter,c
  1286  000788  D004               	goto	l1194
  1287  00078A                     l1192:
  1288  00078A  90D8               	bcf	status,0,c
  1289  00078C  3603               	rlcf	___lwdiv@divisor,f,c
  1290  00078E  3604               	rlcf	___lwdiv@divisor+1,f,c
  1291  000790  2A07               	incf	___lwdiv@counter,f,c
  1292  000792                     l1194:
  1293  000792  AE04               	btfss	___lwdiv@divisor+1,7,c
  1294  000794  D7FA               	goto	l1192
  1295  000796                     l1196:
  1296  000796  90D8               	bcf	status,0,c
  1297  000798  3605               	rlcf	___lwdiv@quotient,f,c
  1298  00079A  3606               	rlcf	___lwdiv@quotient+1,f,c
  1299  00079C  5003               	movf	___lwdiv@divisor,w,c
  1300  00079E  5C01               	subwf	___lwdiv@dividend,w,c
  1301  0007A0  5004               	movf	___lwdiv@divisor+1,w,c
  1302  0007A2  5802               	subwfb	___lwdiv@dividend+1,w,c
  1303  0007A4  A0D8               	btfss	status,0,c
  1304  0007A6  D005               	goto	l1204
  1305  0007A8  5003               	movf	___lwdiv@divisor,w,c
  1306  0007AA  5E01               	subwf	___lwdiv@dividend,f,c
  1307  0007AC  5004               	movf	___lwdiv@divisor+1,w,c
  1308  0007AE  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1309  0007B0  8005               	bsf	___lwdiv@quotient,0,c
  1310  0007B2                     l1204:
  1311  0007B2  90D8               	bcf	status,0,c
  1312  0007B4  3204               	rrcf	___lwdiv@divisor+1,f,c
  1313  0007B6  3203               	rrcf	___lwdiv@divisor,f,c
  1314  0007B8  2E07               	decfsz	___lwdiv@counter,f,c
  1315  0007BA  D7ED               	goto	l1196
  1316  0007BC                     l623:
  1317  0007BC  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1318  0007C0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1319  0007C4  0012               	return		;funcret
  1320  0007C6                     __end_of___lwdiv:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           postinc0	equ	0xFEE
  1329                           wreg	equ	0xFE8
  1330                           indf2	equ	0xFDF
  1331                           postinc2	equ	0xFDE
  1332                           postdec2	equ	0xFDD
  1333                           fsr2h	equ	0xFDA
  1334                           fsr2l	equ	0xFD9
  1335                           status	equ	0xFD8
  1336                           
  1337 ;; *************** function _processSerialData *****************
  1338 ;; Defined at:
  1339 ;;		line 71 in file "uart.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;		None
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1353 ;;      Params:         0       0       0       0
  1354 ;;      Locals:         0       0       0       0
  1355 ;;      Temps:          0       0       0       0
  1356 ;;      Totals:         0       0       0       0
  1357 ;;Total ram usage:        0 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    3
  1360 ;; This function calls:
  1361 ;;		_debug
  1362 ;;		_delay
  1363 ;;		_uart_recv_byte
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;;		_getPWMvalue
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text6
  1371  0004CA                     __ptext6:
  1372                           	opt stack 0
  1373  0004CA                     _processSerialData:
  1374                           	opt stack 25
  1375                           
  1376                           ;uart.c: 73: ch=uart_recv_byte(0x01);
  1377                           
  1378                           ;incstack = 0
  1379  0004CA  0E01               	movlw	1
  1380  0004CC  ECB2  F004         	call	_uart_recv_byte
  1381  0004D0  6E2F               	movwf	_ch,c
  1382                           
  1383                           ;uart.c: 74: if(ch=='#')
  1384  0004D2  0E23               	movlw	35
  1385  0004D4  182F               	xorwf	_ch,w,c
  1386  0004D6  A4D8               	btfss	status,2,c
  1387  0004D8  0012               	return	
  1388                           
  1389                           ;uart.c: 75: {
  1390                           ;uart.c: 76: for(recvIdx=0;recvIdx<8;recvIdx++)
  1391  0004DA  0E00               	movlw	0
  1392  0004DC  6E1C               	movwf	_recvIdx+1,c
  1393  0004DE  0E00               	movlw	0
  1394  0004E0  6E1B               	movwf	_recvIdx,c
  1395  0004E2                     l1230:
  1396  0004E2  BE1C               	btfsc	_recvIdx+1,7,c
  1397  0004E4  D006               	goto	l1234
  1398  0004E6  501C               	movf	_recvIdx+1,w,c
  1399  0004E8  E10F               	bnz	l1240
  1400  0004EA  0E08               	movlw	8
  1401  0004EC  5C1B               	subwf	_recvIdx,w,c
  1402  0004EE  B0D8               	btfsc	status,0,c
  1403  0004F0  D00B               	goto	l1240
  1404  0004F2                     l1234:
  1405                           
  1406                           ;uart.c: 77: uartBuffer[recvIdx]='\0';
  1407  0004F2  0E25               	movlw	low _uartBuffer
  1408  0004F4  241B               	addwf	_recvIdx,w,c
  1409  0004F6  6ED9               	movwf	fsr2l,c
  1410  0004F8  0E00               	movlw	high _uartBuffer
  1411  0004FA  201C               	addwfc	_recvIdx+1,w,c
  1412  0004FC  6EDA               	movwf	fsr2h,c
  1413  0004FE  0E00               	movlw	0
  1414  000500  6EDF               	movwf	indf2,c
  1415  000502  4A1B               	infsnz	_recvIdx,f,c
  1416  000504  2A1C               	incf	_recvIdx+1,f,c
  1417  000506  D7ED               	goto	l1230
  1418  000508                     l1240:
  1419                           
  1420                           ;uart.c: 78: recvIdx = 0;
  1421  000508  0E00               	movlw	0
  1422  00050A  6E1C               	movwf	_recvIdx+1,c
  1423  00050C  0E00               	movlw	0
  1424  00050E  6E1B               	movwf	_recvIdx,c
  1425  000510                     l1242:
  1426                           
  1427                           ;uart.c: 80: {
  1428                           ;uart.c: 81: ch=uart_recv_byte(0x00);
  1429  000510  0E00               	movlw	0
  1430  000512  ECB2  F004         	call	_uart_recv_byte
  1431  000516  6E2F               	movwf	_ch,c
  1432                           
  1433                           ;uart.c: 82: if(ch=='$')
  1434  000518  0E24               	movlw	36
  1435  00051A  182F               	xorwf	_ch,w,c
  1436  00051C  B4D8               	btfsc	status,2,c
  1437  00051E  0012               	return	
  1438                           
  1439                           ;uart.c: 84: else if(ch=='X')
  1440                           
  1441                           ;uart.c: 83: break;
  1442  000520  0E58               	movlw	88
  1443  000522  182F               	xorwf	_ch,w,c
  1444  000524  A4D8               	btfss	status,2,c
  1445  000526  D009               	goto	l1256
  1446                           
  1447                           ;uart.c: 85: {
  1448                           ;uart.c: 86: debug("change to default mode");
  1449  000528  0E0B               	movlw	low STR_1
  1450  00052A  6E07               	movwf	debug@str,c
  1451  00052C  0E03               	movlw	high STR_1
  1452  00052E  6E08               	movwf	debug@str+1,c
  1453  000530  ECCB  F002         	call	_debug	;wreg free
  1454                           
  1455                           ;uart.c: 87: state = 0xFE;
  1456  000534  0EFE               	movlw	254
  1457  000536  6E21               	movwf	_state,c
  1458                           
  1459                           ;uart.c: 88: }
  1460  000538  D00B               	goto	l1264
  1461  00053A                     l1256:
  1462                           
  1463                           ;uart.c: 89: else if(ch=='\0')
  1464  00053A  502F               	movf	_ch,w,c
  1465  00053C  B4D8               	btfsc	status,2,c
  1466  00053E  D7E8               	goto	l1242
  1467                           
  1468                           ;uart.c: 91: else
  1469                           ;uart.c: 92: uartBuffer[recvIdx]=ch;
  1470                           
  1471                           ;uart.c: 90: continue;
  1472  000540  0E25               	movlw	low _uartBuffer
  1473  000542  241B               	addwf	_recvIdx,w,c
  1474  000544  6ED9               	movwf	fsr2l,c
  1475  000546  0E00               	movlw	high _uartBuffer
  1476  000548  201C               	addwfc	_recvIdx+1,w,c
  1477  00054A  6EDA               	movwf	fsr2h,c
  1478  00054C  C02F  FFDF         	movff	_ch,indf2
  1479  000550                     l1264:
  1480                           
  1481                           ;uart.c: 94: if(recvIdx > 8-1)
  1482  000550  BE1C               	btfsc	_recvIdx+1,7,c
  1483  000552  D015               	goto	l1270
  1484  000554  501C               	movf	_recvIdx+1,w,c
  1485  000556  E104               	bnz	u590
  1486  000558  0E08               	movlw	8
  1487  00055A  5C1B               	subwf	_recvIdx,w,c
  1488  00055C  A0D8               	btfss	status,0,c
  1489  00055E  D00F               	goto	l1270
  1490  000560                     u590:
  1491                           
  1492                           ;uart.c: 95: {
  1493                           ;uart.c: 96: debug("Invalid data.");
  1494  000560  0E6D               	movlw	low STR_2
  1495  000562  6E07               	movwf	debug@str,c
  1496  000564  0E03               	movlw	high STR_2
  1497  000566  6E08               	movwf	debug@str+1,c
  1498  000568  ECCB  F002         	call	_debug	;wreg free
  1499                           
  1500                           ;uart.c: 97: debug("change to default mode");
  1501  00056C  0E0B               	movlw	low STR_1
  1502  00056E  6E07               	movwf	debug@str,c
  1503  000570  0E03               	movlw	high STR_1
  1504  000572  6E08               	movwf	debug@str+1,c
  1505  000574  ECCB  F002         	call	_debug	;wreg free
  1506                           
  1507                           ;uart.c: 98: state = 0xFE;
  1508  000578  0EFE               	movlw	254
  1509  00057A  6E21               	movwf	_state,c
  1510                           
  1511                           ;uart.c: 99: }
  1512  00057C  D002               	goto	l1272
  1513  00057E                     l1270:
  1514                           
  1515                           ;uart.c: 100: else
  1516                           ;uart.c: 101: recvIdx++;
  1517  00057E  4A1B               	infsnz	_recvIdx,f,c
  1518  000580  2A1C               	incf	_recvIdx+1,f,c
  1519  000582                     l1272:
  1520                           
  1521                           ;uart.c: 102: __nop();
  1522  000582  F000               	nop	
  1523                           
  1524                           ;uart.c: 103: __nop();
  1525  000584  F000               	nop	
  1526                           
  1527                           ;uart.c: 104: __nop();
  1528  000586  F000               	nop	
  1529                           
  1530                           ;uart.c: 105: delay(9000);
  1531  000588  0E23               	movlw	35
  1532  00058A  6E02               	movwf	delay@count+1,c
  1533  00058C  0E28               	movlw	40
  1534  00058E  6E01               	movwf	delay@count,c
  1535  000590  EC80  F004         	call	_delay	;wreg free
  1536  000594  D7BD               	goto	l1242
  1537  000596                     __end_of_processSerialData:
  1538                           	opt stack 0
  1539                           tblptru	equ	0xFF8
  1540                           tblptrh	equ	0xFF7
  1541                           tblptrl	equ	0xFF6
  1542                           tablat	equ	0xFF5
  1543                           prodh	equ	0xFF4
  1544                           prodl	equ	0xFF3
  1545                           postinc0	equ	0xFEE
  1546                           wreg	equ	0xFE8
  1547                           indf2	equ	0xFDF
  1548                           postinc2	equ	0xFDE
  1549                           postdec2	equ	0xFDD
  1550                           fsr2h	equ	0xFDA
  1551                           fsr2l	equ	0xFD9
  1552                           status	equ	0xFD8
  1553                           
  1554 ;; *************** function _uart_recv_byte *****************
  1555 ;; Defined at:
  1556 ;;		line 48 in file "uart.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;  flag            1    wreg     unsigned char 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  flag            1    0[COMRAM] unsigned char 
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      unsigned char 
  1563 ;; Registers used:
  1564 ;;		wreg, status,2
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1570 ;;      Params:         0       0       0       0
  1571 ;;      Locals:         0       0       0       0
  1572 ;;      Temps:          0       0       0       0
  1573 ;;      Totals:         0       0       0       0
  1574 ;;Total ram usage:        0 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; This function calls:
  1577 ;;		Nothing
  1578 ;; This function is called by:
  1579 ;;		_processSerialData
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text7
  1584  000964                     __ptext7:
  1585                           	opt stack 0
  1586  000964                     _uart_recv_byte:
  1587                           	opt stack 27
  1588  000964                     l154:
  1589  000964  AA9E               	btfss	3998,5,c	;volatile
  1590  000966  D7FE               	goto	l154
  1591                           
  1592                           ;uart.c: 53: }
  1593                           ;uart.c: 54: ch2 = RCREG;
  1594  000968  CFAE F01F          	movff	4014,_ch2	;volatile
  1595                           
  1596                           ;uart.c: 55: return ch2;
  1597  00096C  501F               	movf	_ch2,w,c
  1598  00096E  0012               	return		;funcret
  1599  000970                     __end_of_uart_recv_byte:
  1600                           	opt stack 0
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           prodh	equ	0xFF4
  1606                           prodl	equ	0xFF3
  1607                           postinc0	equ	0xFEE
  1608                           wreg	equ	0xFE8
  1609                           indf2	equ	0xFDF
  1610                           postinc2	equ	0xFDE
  1611                           postdec2	equ	0xFDD
  1612                           fsr2h	equ	0xFDA
  1613                           fsr2l	equ	0xFD9
  1614                           status	equ	0xFD8
  1615                           
  1616 ;; *************** function _memcpy *****************
  1617 ;; Defined at:
  1618 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memcpy.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;  d1              2    0[COMRAM] PTR void 
  1621 ;;		 -> testPWMValue(2), 
  1622 ;;  s1              2    2[COMRAM] PTR const void 
  1623 ;;		 -> uartBuffer(8), 
  1624 ;;  n               2    4[COMRAM] unsigned int 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  s               2    8[COMRAM] PTR const unsigned char 
  1627 ;;		 -> uartBuffer(8), 
  1628 ;;  d               2    6[COMRAM] PTR unsigned char 
  1629 ;;		 -> testPWMValue(2), 
  1630 ;;  tmp             1   10[COMRAM] unsigned char 
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  2    0[COMRAM] PTR void 
  1633 ;; Registers used:
  1634 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1640 ;;      Params:         6       0       0       0
  1641 ;;      Locals:         5       0       0       0
  1642 ;;      Temps:          0       0       0       0
  1643 ;;      Totals:        11       0       0       0
  1644 ;;Total ram usage:       11 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_getPWMvalue
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text8
  1654  000818                     __ptext8:
  1655                           	opt stack 0
  1656  000818                     _memcpy:
  1657                           	opt stack 28
  1658                           
  1659                           ;incstack = 0
  1660  000818  C003  F009         	movff	memcpy@s1,memcpy@s
  1661  00081C  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  1662  000820  C001  F007         	movff	memcpy@d1,memcpy@d
  1663  000824  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  1664  000828  D010               	goto	l1290
  1665  00082A                     l1282:
  1666  00082A  C009  FFD9         	movff	memcpy@s,fsr2l
  1667  00082E  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  1668  000832  50DF               	movf	indf2,w,c
  1669  000834  6E0B               	movwf	memcpy@tmp,c
  1670  000836  4A09               	infsnz	memcpy@s,f,c
  1671  000838  2A0A               	incf	memcpy@s+1,f,c
  1672  00083A  C007  FFD9         	movff	memcpy@d,fsr2l
  1673  00083E  C008  FFDA         	movff	memcpy@d+1,fsr2h
  1674  000842  C00B  FFDF         	movff	memcpy@tmp,indf2
  1675  000846  4A07               	infsnz	memcpy@d,f,c
  1676  000848  2A08               	incf	memcpy@d+1,f,c
  1677  00084A                     l1290:
  1678  00084A  0605               	decf	memcpy@n,f,c
  1679  00084C  A0D8               	btfss	status,0,c
  1680  00084E  0606               	decf	memcpy@n+1,f,c
  1681  000850  2805               	incf	memcpy@n,w,c
  1682  000852  E1EB               	bnz	l1282
  1683  000854  2806               	incf	memcpy@n+1,w,c
  1684  000856  B4D8               	btfsc	status,2,c
  1685  000858  0012               	return	
  1686  00085A  D7E7               	goto	l1282
  1687  00085C                     __end_of_memcpy:
  1688                           	opt stack 0
  1689                           tblptru	equ	0xFF8
  1690                           tblptrh	equ	0xFF7
  1691                           tblptrl	equ	0xFF6
  1692                           tablat	equ	0xFF5
  1693                           prodh	equ	0xFF4
  1694                           prodl	equ	0xFF3
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           indf2	equ	0xFDF
  1698                           postinc2	equ	0xFDE
  1699                           postdec2	equ	0xFDD
  1700                           fsr2h	equ	0xFDA
  1701                           fsr2l	equ	0xFD9
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function _eusart_init *****************
  1705 ;; Defined at:
  1706 ;;		line 8 in file "uart.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  usart_mode      1    wreg     unsigned char 
  1709 ;;  tx_mode         1    0[COMRAM] unsigned char 
  1710 ;;  fosc            4    1[COMRAM] unsigned long 
  1711 ;;  baud            2    5[COMRAM] unsigned int 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  usart_mode      1    7[COMRAM] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg, status,2, status,0
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1723 ;;      Params:         7       0       0       0
  1724 ;;      Locals:         1       0       0       0
  1725 ;;      Temps:          0       0       0       0
  1726 ;;      Totals:         8       0       0       0
  1727 ;;Total ram usage:        8 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_main
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text9
  1737  0008D2                     __ptext9:
  1738                           	opt stack 0
  1739  0008D2                     _eusart_init:
  1740                           	opt stack 30
  1741                           
  1742                           ;incstack = 0
  1743                           ;eusart_init@usart_mode stored from wreg
  1744  0008D2  6E08               	movwf	eusart_init@usart_mode,c
  1745                           
  1746                           ;uart.c: 11: TRISC6 = 0;
  1747  0008D4  9C94               	bcf	3988,6,c	;volatile
  1748                           
  1749                           ;uart.c: 12: TRISC7 = 1;
  1750  0008D6  8E94               	bsf	3988,7,c	;volatile
  1751                           
  1752                           ;uart.c: 14: switch(usart_mode)
  1753  0008D8  D00A               	goto	l1368
  1754  0008DA                     l141:
  1755                           
  1756                           ;uart.c: 17: {
  1757                           ;uart.c: 18: BRG16 = 0;
  1758  0008DA  96AA               	bcf	4010,3,c	;volatile
  1759                           
  1760                           ;uart.c: 19: BAUDCTL = 0b00000000;
  1761  0008DC  0E00               	movlw	0
  1762  0008DE  6EAA               	movwf	4010,c	;volatile
  1763                           
  1764                           ;uart.c: 22: SPBRG =51;
  1765  0008E0  0E33               	movlw	51
  1766  0008E2  6EAF               	movwf	4015,c	;volatile
  1767                           
  1768                           ;uart.c: 24: TXSTA = 0b00100100;
  1769  0008E4  0E24               	movlw	36
  1770  0008E6  6EAC               	movwf	4012,c	;volatile
  1771                           
  1772                           ;uart.c: 25: RCSTA = 0x90;
  1773  0008E8  0E90               	movlw	144
  1774  0008EA  6EAB               	movwf	4011,c	;volatile
  1775                           
  1776                           ;uart.c: 35: }
  1777                           ;uart.c: 36: }
  1778                           
  1779                           ;uart.c: 33: {
  1780                           ;uart.c: 34: break;
  1781                           
  1782                           ;uart.c: 31: }
  1783                           ;uart.c: 32: case 2:
  1784                           
  1785                           ;uart.c: 29: {
  1786                           ;uart.c: 30: break;
  1787                           
  1788                           ;uart.c: 27: }
  1789                           ;uart.c: 28: case 1:
  1790                           
  1791                           ;uart.c: 26: break;
  1792  0008EC  0012               	return	
  1793  0008EE                     l1368:
  1794  0008EE  5008               	movf	eusart_init@usart_mode,w,c
  1795                           
  1796                           ; Switch size 1, requested type "space"
  1797                           ; Number of cases is 3, Range of values is 0 to 2
  1798                           ; switch strategies available:
  1799                           ; Name         Instructions Cycles
  1800                           ; simple_byte           10     6 (average)
  1801                           ;	Chosen strategy is simple_byte
  1802  0008F0  0A00               	xorlw	0	; case 0
  1803  0008F2  B4D8               	btfsc	status,2,c
  1804  0008F4  D7F2               	goto	l141
  1805  0008F6  0A01               	xorlw	1	; case 1
  1806  0008F8  B4D8               	btfsc	status,2,c
  1807  0008FA  0012               	return	
  1808  0008FC  0A03               	xorlw	3	; case 2
  1809  0008FE  0012               	return	
  1810  000900                     __end_of_eusart_init:
  1811                           	opt stack 0
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           postinc0	equ	0xFEE
  1819                           wreg	equ	0xFE8
  1820                           indf2	equ	0xFDF
  1821                           postinc2	equ	0xFDE
  1822                           postdec2	equ	0xFDD
  1823                           fsr2h	equ	0xFDA
  1824                           fsr2l	equ	0xFD9
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function _changeMode *****************
  1828 ;; Defined at:
  1829 ;;		line 110 in file "uart.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1843 ;;      Params:         0       0       0       0
  1844 ;;      Locals:         0       0       0       0
  1845 ;;      Temps:          0       0       0       0
  1846 ;;      Totals:         0       0       0       0
  1847 ;;Total ram usage:        0 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:    3
  1850 ;; This function calls:
  1851 ;;		_debug
  1852 ;; This function is called by:
  1853 ;;		_main
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           	psect	text10
  1858  00062C                     __ptext10:
  1859                           	opt stack 0
  1860  00062C                     _changeMode:
  1861                           	opt stack 27
  1862                           
  1863                           ;uart.c: 112: if((uartBuffer[0]=='T'))
  1864                           
  1865                           ;incstack = 0
  1866  00062C  0E54               	movlw	84
  1867  00062E  1825               	xorwf	_uartBuffer,w,c
  1868  000630  A4D8               	btfss	status,2,c
  1869  000632  D009               	goto	l1376
  1870                           
  1871                           ;uart.c: 113: {
  1872                           ;uart.c: 114: debug("entering test mode");
  1873  000634  0E38               	movlw	low STR_4
  1874  000636  6E07               	movwf	debug@str,c
  1875  000638  0E03               	movlw	high STR_4
  1876  00063A  6E08               	movwf	debug@str+1,c
  1877  00063C  ECCB  F002         	call	_debug	;wreg free
  1878                           
  1879                           ;uart.c: 115: state = 0x01;
  1880  000640  0E01               	movlw	1
  1881  000642  6E21               	movwf	_state,c
  1882                           
  1883                           ;uart.c: 116: }
  1884  000644  0012               	return	
  1885  000646                     l1376:
  1886                           
  1887                           ;uart.c: 117: else if((uartBuffer[0]=='S')&&(uartBuffer[1]=='E')&&(uartBuffer[2]=='T'))
  1888  000646  0E53               	movlw	83
  1889  000648  1825               	xorwf	_uartBuffer,w,c
  1890  00064A  A4D8               	btfss	status,2,c
  1891  00064C  D011               	goto	l1386
  1892  00064E  0E45               	movlw	69
  1893  000650  1826               	xorwf	_uartBuffer+1,w,c
  1894  000652  A4D8               	btfss	status,2,c
  1895  000654  D00D               	goto	l1386
  1896  000656  0E54               	movlw	84
  1897  000658  1827               	xorwf	_uartBuffer+2,w,c
  1898  00065A  A4D8               	btfss	status,2,c
  1899  00065C  D009               	goto	l1386
  1900                           
  1901                           ;uart.c: 118: {
  1902                           ;uart.c: 119: debug("entering set mode");
  1903  00065E  0E4B               	movlw	low STR_5
  1904  000660  6E07               	movwf	debug@str,c
  1905  000662  0E03               	movlw	high STR_5
  1906  000664  6E08               	movwf	debug@str+1,c
  1907  000666  ECCB  F002         	call	_debug	;wreg free
  1908                           
  1909                           ;uart.c: 120: state= 0x02;
  1910  00066A  0E02               	movlw	2
  1911  00066C  6E21               	movwf	_state,c
  1912                           
  1913                           ;uart.c: 121: }
  1914  00066E  0012               	return	
  1915  000670                     l1386:
  1916                           
  1917                           ;uart.c: 122: else if((uartBuffer[0]=='F')&&(uartBuffer[1]=='I')&&(uartBuffer[2]=='N'))
  1918  000670  0E46               	movlw	70
  1919  000672  1825               	xorwf	_uartBuffer,w,c
  1920  000674  A4D8               	btfss	status,2,c
  1921  000676  D011               	goto	l1396
  1922  000678  0E49               	movlw	73
  1923  00067A  1826               	xorwf	_uartBuffer+1,w,c
  1924  00067C  A4D8               	btfss	status,2,c
  1925  00067E  D00D               	goto	l1396
  1926  000680  0E4E               	movlw	78
  1927  000682  1827               	xorwf	_uartBuffer+2,w,c
  1928  000684  A4D8               	btfss	status,2,c
  1929  000686  D009               	goto	l1396
  1930                           
  1931                           ;uart.c: 123: {
  1932                           ;uart.c: 124: debug("Going to Default Mode");
  1933  000688  0E22               	movlw	low STR_6
  1934  00068A  6E07               	movwf	debug@str,c
  1935  00068C  0E03               	movlw	high STR_6
  1936  00068E  6E08               	movwf	debug@str+1,c
  1937  000690  ECCB  F002         	call	_debug	;wreg free
  1938                           
  1939                           ;uart.c: 125: state= 0xFE;
  1940  000694  0EFE               	movlw	254
  1941  000696  6E21               	movwf	_state,c
  1942                           
  1943                           ;uart.c: 126: }
  1944  000698  0012               	return	
  1945  00069A                     l1396:
  1946                           
  1947                           ;uart.c: 127: else
  1948                           ;uart.c: 128: {
  1949                           ;uart.c: 130: state = 0xFE;
  1950  00069A  0EFE               	movlw	254
  1951  00069C  6E21               	movwf	_state,c
  1952  00069E  0012               	return	
  1953  0006A0                     __end_of_changeMode:
  1954                           	opt stack 0
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           prodh	equ	0xFF4
  1960                           prodl	equ	0xFF3
  1961                           postinc0	equ	0xFEE
  1962                           wreg	equ	0xFE8
  1963                           indf2	equ	0xFDF
  1964                           postinc2	equ	0xFDE
  1965                           postdec2	equ	0xFDD
  1966                           fsr2h	equ	0xFDA
  1967                           fsr2l	equ	0xFD9
  1968                           status	equ	0xFD8
  1969                           
  1970 ;; *************** function _debug *****************
  1971 ;; Defined at:
  1972 ;;		line 57 in file "uart.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  str             2    6[COMRAM] PTR unsigned char 
  1975 ;;		 -> STR_7(16), STR_6(22), STR_5(18), STR_4(19), 
  1976 ;;		 -> STR_3(23), STR_2(14), STR_1(23), uartBuffer(8), 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  i               2   12[COMRAM] int 
  1979 ;;  len             2   10[COMRAM] int 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1989 ;;      Params:         2       0       0       0
  1990 ;;      Locals:         4       0       0       0
  1991 ;;      Temps:          2       0       0       0
  1992 ;;      Totals:         8       0       0       0
  1993 ;;Total ram usage:        8 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    2
  1996 ;; This function calls:
  1997 ;;		_delay
  1998 ;;		_strlen
  1999 ;;		_uart_send_byte
  2000 ;; This function is called by:
  2001 ;;		_processSerialData
  2002 ;;		_changeMode
  2003 ;;		_getPWMvalue
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text11
  2008  000596                     __ptext11:
  2009                           	opt stack 0
  2010  000596                     _debug:
  2011                           	opt stack 25
  2012                           
  2013                           ;uart.c: 59: int len=0,i=0;
  2014                           
  2015                           ;incstack = 0
  2016  000596  0E00               	movlw	0
  2017  000598  6E0C               	movwf	debug@len+1,c
  2018  00059A  0E00               	movlw	0
  2019  00059C  6E0B               	movwf	debug@len,c
  2020  00059E  0E00               	movlw	0
  2021  0005A0  6E0E               	movwf	debug@i+1,c
  2022  0005A2  0E00               	movlw	0
  2023  0005A4  6E0D               	movwf	debug@i,c
  2024                           
  2025                           ;uart.c: 60: len=strlen(str);
  2026  0005A6  C007  F001         	movff	debug@str,strlen@s
  2027  0005AA  C008  F002         	movff	debug@str+1,strlen@s+1
  2028  0005AE  ECE3  F003         	call	_strlen	;wreg free
  2029  0005B2  C001  F00B         	movff	?_strlen,debug@len
  2030  0005B6  C002  F00C         	movff	?_strlen+1,debug@len+1
  2031                           
  2032                           ;uart.c: 61: for(i=0;i<len;i++)
  2033  0005BA  0E00               	movlw	0
  2034  0005BC  6E0E               	movwf	debug@i+1,c
  2035  0005BE  0E00               	movlw	0
  2036  0005C0  6E0D               	movwf	debug@i,c
  2037  0005C2  D020               	goto	l1182
  2038  0005C4                     l1176:
  2039                           
  2040                           ;uart.c: 62: {
  2041                           ;uart.c: 63: uart_send_byte(str[i]);
  2042  0005C4  500D               	movf	debug@i,w,c
  2043  0005C6  2407               	addwf	debug@str,w,c
  2044  0005C8  6E09               	movwf	??_debug& (0+255),c
  2045  0005CA  500E               	movf	debug@i+1,w,c
  2046  0005CC  2008               	addwfc	debug@str+1,w,c
  2047  0005CE  6E0A               	movwf	(??_debug+1)& (0+255),c
  2048  0005D0  C009  FFF6         	movff	??_debug,tblptrl
  2049  0005D4  C00A  FFF7         	movff	??_debug+1,tblptrh
  2050  0005D8  6AF8               	clrf	tblptru,c
  2051  0005DA  0E02               	movlw	(high __ramtop+-1)
  2052  0005DC  64F7               	cpfsgt	tblptrh,c
  2053  0005DE  D003               	bra	u457
  2054  0005E0  0008               	tblrd		*
  2055  0005E2  50F5               	movf	tablat,w,c
  2056  0005E4  D005               	bra	u450
  2057  0005E6                     u457:
  2058  0005E6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2059  0005EA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2060  0005EE  50EF               	movf	indf0,w,c
  2061  0005F0                     u450:
  2062  0005F0  ECA6  F004         	call	_uart_send_byte
  2063                           
  2064                           ;uart.c: 66: delay(100);
  2065  0005F4  0E00               	movlw	0
  2066  0005F6  6E02               	movwf	delay@count+1,c
  2067  0005F8  0E64               	movlw	100
  2068  0005FA  6E01               	movwf	delay@count,c
  2069  0005FC  EC80  F004         	call	_delay	;wreg free
  2070  000600  4A0D               	infsnz	debug@i,f,c
  2071  000602  2A0E               	incf	debug@i+1,f,c
  2072  000604                     l1182:
  2073  000604  500B               	movf	debug@len,w,c
  2074  000606  5C0D               	subwf	debug@i,w,c
  2075  000608  500E               	movf	debug@i+1,w,c
  2076  00060A  0A80               	xorlw	128
  2077  00060C  6E09               	movwf	??_debug& (0+255),c
  2078  00060E  500C               	movf	debug@len+1,w,c
  2079  000610  0A80               	xorlw	128
  2080  000612  5809               	subwfb	??_debug& (0+255),w,c
  2081  000614  A0D8               	btfss	status,0,c
  2082  000616  D7D6               	goto	l1176
  2083                           
  2084                           ;uart.c: 67: }
  2085                           ;uart.c: 68: uart_send_byte('\n');
  2086  000618  0E0A               	movlw	10
  2087  00061A  ECA6  F004         	call	_uart_send_byte
  2088                           
  2089                           ;uart.c: 69: delay(100);
  2090  00061E  0E00               	movlw	0
  2091  000620  6E02               	movwf	delay@count+1,c
  2092  000622  0E64               	movlw	100
  2093  000624  6E01               	movwf	delay@count,c
  2094  000626  EC80  F004         	call	_delay	;wreg free
  2095  00062A  0012               	return		;funcret
  2096  00062C                     __end_of_debug:
  2097                           	opt stack 0
  2098                           tblptru	equ	0xFF8
  2099                           tblptrh	equ	0xFF7
  2100                           tblptrl	equ	0xFF6
  2101                           tablat	equ	0xFF5
  2102                           prodh	equ	0xFF4
  2103                           prodl	equ	0xFF3
  2104                           indf0	equ	0xFEF
  2105                           postinc0	equ	0xFEE
  2106                           fsr0h	equ	0xFEA
  2107                           fsr0l	equ	0xFE9
  2108                           wreg	equ	0xFE8
  2109                           indf2	equ	0xFDF
  2110                           postinc2	equ	0xFDE
  2111                           postdec2	equ	0xFDD
  2112                           fsr2h	equ	0xFDA
  2113                           fsr2l	equ	0xFD9
  2114                           status	equ	0xFD8
  2115                           
  2116 ;; *************** function _uart_send_byte *****************
  2117 ;; Defined at:
  2118 ;;		line 39 in file "uart.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  byte            1    wreg     unsigned char 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  byte            1    5[COMRAM] unsigned char 
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  1    wreg      void 
  2125 ;; Registers used:
  2126 ;;		wreg, status,2, status,0, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2132 ;;      Params:         0       0       0       0
  2133 ;;      Locals:         1       0       0       0
  2134 ;;      Temps:          0       0       0       0
  2135 ;;      Totals:         1       0       0       0
  2136 ;;Total ram usage:        1 bytes
  2137 ;; Hardware stack levels used:    1
  2138 ;; Hardware stack levels required when called:    1
  2139 ;; This function calls:
  2140 ;;		_delay
  2141 ;; This function is called by:
  2142 ;;		_debug
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           	psect	text12
  2147  00094C                     __ptext12:
  2148                           	opt stack 0
  2149  00094C                     _uart_send_byte:
  2150                           	opt stack 25
  2151                           
  2152                           ;incstack = 0
  2153                           ;uart_send_byte@byte stored from wreg
  2154  00094C  6E06               	movwf	uart_send_byte@byte,c
  2155  00094E                     l148:
  2156  00094E  A89E               	btfss	3998,4,c	;volatile
  2157  000950  D7FE               	goto	l148
  2158                           
  2159                           ;uart.c: 44: }
  2160                           ;uart.c: 45: TXREG = byte;
  2161  000952  C006  FFAD         	movff	uart_send_byte@byte,4013	;volatile
  2162                           
  2163                           ;uart.c: 46: delay(1000);
  2164  000956  0E03               	movlw	3
  2165  000958  6E02               	movwf	delay@count+1,c
  2166  00095A  0EE8               	movlw	232
  2167  00095C  6E01               	movwf	delay@count,c
  2168  00095E  EC80  F004         	call	_delay	;wreg free
  2169  000962  0012               	return		;funcret
  2170  000964                     __end_of_uart_send_byte:
  2171                           	opt stack 0
  2172                           tblptru	equ	0xFF8
  2173                           tblptrh	equ	0xFF7
  2174                           tblptrl	equ	0xFF6
  2175                           tablat	equ	0xFF5
  2176                           prodh	equ	0xFF4
  2177                           prodl	equ	0xFF3
  2178                           indf0	equ	0xFEF
  2179                           postinc0	equ	0xFEE
  2180                           fsr0h	equ	0xFEA
  2181                           fsr0l	equ	0xFE9
  2182                           wreg	equ	0xFE8
  2183                           indf2	equ	0xFDF
  2184                           postinc2	equ	0xFDE
  2185                           postdec2	equ	0xFDD
  2186                           fsr2h	equ	0xFDA
  2187                           fsr2l	equ	0xFD9
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function _delay *****************
  2191 ;; Defined at:
  2192 ;;		line 89 in file "main.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  count           2    0[COMRAM] int 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  i               2    3[COMRAM] int 
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		wreg, status,2, status,0
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2206 ;;      Params:         2       0       0       0
  2207 ;;      Locals:         2       0       0       0
  2208 ;;      Temps:          1       0       0       0
  2209 ;;      Totals:         5       0       0       0
  2210 ;;Total ram usage:        5 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;;		_uart_send_byte
  2217 ;;		_debug
  2218 ;;		_processSerialData
  2219 ;;		_getPWMvalue
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text13
  2224  000900                     __ptext13:
  2225                           	opt stack 0
  2226  000900                     _delay:
  2227                           	opt stack 27
  2228                           
  2229                           ;main.c: 91: int i=0;
  2230                           
  2231                           ;incstack = 0
  2232  000900  0E00               	movlw	0
  2233  000902  6E05               	movwf	delay@i+1,c
  2234  000904  0E00               	movlw	0
  2235  000906  6E04               	movwf	delay@i,c
  2236                           
  2237                           ;main.c: 93: for(i=0;i<count;i++)
  2238  000908  0E00               	movlw	0
  2239  00090A  6E05               	movwf	delay@i+1,c
  2240  00090C  0E00               	movlw	0
  2241  00090E  6E04               	movwf	delay@i,c
  2242  000910  D002               	goto	l1152
  2243  000912                     l1150:
  2244                           
  2245                           ;main.c: 94: {
  2246  000912  4A04               	infsnz	delay@i,f,c
  2247  000914  2A05               	incf	delay@i+1,f,c
  2248  000916                     l1152:
  2249  000916  5001               	movf	delay@count,w,c
  2250  000918  5C04               	subwf	delay@i,w,c
  2251  00091A  5005               	movf	delay@i+1,w,c
  2252  00091C  0A80               	xorlw	128
  2253  00091E  6E03               	movwf	??_delay& (0+255),c
  2254  000920  5002               	movf	delay@count+1,w,c
  2255  000922  0A80               	xorlw	128
  2256  000924  5803               	subwfb	??_delay& (0+255),w,c
  2257  000926  B0D8               	btfsc	status,0,c
  2258  000928  0012               	return	
  2259  00092A  D7F3               	goto	l1150
  2260  00092C                     __end_of_delay:
  2261                           	opt stack 0
  2262                           tblptru	equ	0xFF8
  2263                           tblptrh	equ	0xFF7
  2264                           tblptrl	equ	0xFF6
  2265                           tablat	equ	0xFF5
  2266                           prodh	equ	0xFF4
  2267                           prodl	equ	0xFF3
  2268                           indf0	equ	0xFEF
  2269                           postinc0	equ	0xFEE
  2270                           fsr0h	equ	0xFEA
  2271                           fsr0l	equ	0xFE9
  2272                           wreg	equ	0xFE8
  2273                           indf2	equ	0xFDF
  2274                           postinc2	equ	0xFDE
  2275                           postdec2	equ	0xFDD
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _strlen *****************
  2281 ;; Defined at:
  2282 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\strlen.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2285 ;;		 -> STR_7(16), STR_6(22), STR_5(18), STR_4(19), 
  2286 ;;		 -> STR_3(23), STR_2(14), STR_1(23), uartBuffer(8), 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  2289 ;;		 -> STR_7(16), STR_6(22), STR_5(18), STR_4(19), 
  2290 ;;		 -> STR_3(23), STR_2(14), STR_1(23), uartBuffer(8), 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  2    0[COMRAM] unsigned int 
  2293 ;; Registers used:
  2294 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2300 ;;      Params:         2       0       0       0
  2301 ;;      Locals:         2       0       0       0
  2302 ;;      Temps:          2       0       0       0
  2303 ;;      Totals:         6       0       0       0
  2304 ;;Total ram usage:        6 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; This function calls:
  2307 ;;		Nothing
  2308 ;; This function is called by:
  2309 ;;		_debug
  2310 ;; This function uses a non-reentrant model
  2311 ;;
  2312                           
  2313                           	psect	text14
  2314  0007C6                     __ptext14:
  2315                           	opt stack 0
  2316  0007C6                     _strlen:
  2317                           	opt stack 26
  2318                           
  2319                           ;incstack = 0
  2320  0007C6  C001  F005         	movff	strlen@s,strlen@cp
  2321  0007CA  C002  F006         	movff	strlen@s+1,strlen@cp+1
  2322  0007CE  D002               	goto	l1164
  2323  0007D0                     l1162:
  2324  0007D0  4A05               	infsnz	strlen@cp,f,c
  2325  0007D2  2A06               	incf	strlen@cp+1,f,c
  2326  0007D4                     l1164:
  2327  0007D4  C005  FFF6         	movff	strlen@cp,tblptrl
  2328  0007D8  C006  FFF7         	movff	strlen@cp+1,tblptrh
  2329  0007DC  6AF8               	clrf	tblptru,c
  2330  0007DE  0E02               	movlw	(high __ramtop+-1)
  2331  0007E0  64F7               	cpfsgt	tblptrh,c
  2332  0007E2  D003               	bra	u437
  2333  0007E4  0008               	tblrd		*
  2334  0007E6  50F5               	movf	tablat,w,c
  2335  0007E8  D005               	bra	u430
  2336  0007EA                     u437:
  2337  0007EA  CFF6 FFE9          	movff	tblptrl,fsr0l
  2338  0007EE  CFF7 FFEA          	movff	tblptrh,fsr0h
  2339  0007F2  50EF               	movf	indf0,w,c
  2340  0007F4                     u430:
  2341  0007F4  0900               	iorlw	0
  2342  0007F6  A4D8               	btfss	status,2,c
  2343  0007F8  D7EB               	goto	l1162
  2344  0007FA  C001  F003         	movff	strlen@s,??_strlen
  2345  0007FE  C002  F004         	movff	strlen@s+1,??_strlen+1
  2346  000802  1E03               	comf	??_strlen,f,c
  2347  000804  1E04               	comf	??_strlen+1,f,c
  2348  000806  4A03               	infsnz	??_strlen,f,c
  2349  000808  2A04               	incf	??_strlen+1,f,c
  2350  00080A  5005               	movf	strlen@cp,w,c
  2351  00080C  2403               	addwf	??_strlen,w,c
  2352  00080E  6E01               	movwf	?_strlen,c
  2353  000810  5006               	movf	strlen@cp+1,w,c
  2354  000812  2004               	addwfc	??_strlen+1,w,c
  2355  000814  6E02               	movwf	?_strlen+1,c
  2356  000816  0012               	return	
  2357  000818                     __end_of_strlen:
  2358                           	opt stack 0
  2359                           tblptru	equ	0xFF8
  2360                           tblptrh	equ	0xFF7
  2361                           tblptrl	equ	0xFF6
  2362                           tablat	equ	0xFF5
  2363                           prodh	equ	0xFF4
  2364                           prodl	equ	0xFF3
  2365                           indf0	equ	0xFEF
  2366                           postinc0	equ	0xFEE
  2367                           fsr0h	equ	0xFEA
  2368                           fsr0l	equ	0xFE9
  2369                           wreg	equ	0xFE8
  2370                           indf2	equ	0xFDF
  2371                           postinc2	equ	0xFDE
  2372                           postdec2	equ	0xFDD
  2373                           fsr2h	equ	0xFDA
  2374                           fsr2l	equ	0xFD9
  2375                           status	equ	0xFD8
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           prodh	equ	0xFF4
  2381                           prodl	equ	0xFF3
  2382                           indf0	equ	0xFEF
  2383                           postinc0	equ	0xFEE
  2384                           fsr0h	equ	0xFEA
  2385                           fsr0l	equ	0xFE9
  2386                           wreg	equ	0xFE8
  2387                           indf2	equ	0xFDF
  2388                           postinc2	equ	0xFDE
  2389                           postdec2	equ	0xFDD
  2390                           fsr2h	equ	0xFDA
  2391                           fsr2l	equ	0xFD9
  2392                           status	equ	0xFD8
  2393                           
  2394                           	psect	rparam
  2395  0000                     tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           prodh	equ	0xFF4
  2400                           prodl	equ	0xFF3
  2401                           indf0	equ	0xFEF
  2402                           postinc0	equ	0xFEE
  2403                           fsr0h	equ	0xFEA
  2404                           fsr0l	equ	0xFE9
  2405                           wreg	equ	0xFE8
  2406                           indf2	equ	0xFDF
  2407                           postinc2	equ	0xFDE
  2408                           postdec2	equ	0xFDD
  2409                           fsr2h	equ	0xFDA
  2410                           fsr2l	equ	0xFD9
  2411                           status	equ	0xFD8


Data Sizes:
    Strings     117
    Constant    10
    Data        3
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     26      49
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_7(CODE[16]), STR_6(CODE[22]), STR_5(CODE[18]), STR_4(CODE[19]), 
		 -> STR_3(CODE[23]), STR_2(CODE[14]), STR_1(CODE[23]), uartBuffer(COMRAM[8]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_7(CODE[16]), STR_6(CODE[22]), STR_5(CODE[18]), STR_4(CODE[19]), 
		 -> STR_3(CODE[23]), STR_2(CODE[14]), STR_1(CODE[23]), uartBuffer(COMRAM[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 2
		 -> testPWMValue(COMRAM[2]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 2
		 -> testPWMValue(COMRAM[2]), 

    memcpy@s1	PTR const void  size(2) Largest target is 8
		 -> uartBuffer(COMRAM[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 8
		 -> uartBuffer(COMRAM[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> uartBuffer(COMRAM[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__memcpy	PTR void  size(2) Largest target is 2
		 -> testPWMValue(COMRAM[2]), 

    debug@str	PTR unsigned char  size(2) Largest target is 23
		 -> STR_7(CODE[16]), STR_6(CODE[22]), STR_5(CODE[18]), STR_4(CODE[19]), 
		 -> STR_3(CODE[23]), STR_2(CODE[14]), STR_1(CODE[23]), uartBuffer(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _getPWMvalue->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _processSerialData->_debug
    _changeMode->_debug
    _debug->_strlen
    _debug->_uart_send_byte
    _uart_send_byte->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11555
                         _changeMode
                              _delay
                        _eusart_init
                  _processSerialData
                      _state_machine
 ---------------------------------------------------------------------------------
 (1) _state_machine                                        0     0      0    6465
                        _getPWMvalue
 ---------------------------------------------------------------------------------
 (2) _getPWMvalue                                          0     0      0    6465
                              _debug
                              _delay
                             _memcpy
                  _processSerialData
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    17      6    1254
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _processSerialData                                    0     0      0    2420
                              _debug
                              _delay
                     _uart_recv_byte
 ---------------------------------------------------------------------------------
 (4) _uart_recv_byte                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     371
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _eusart_init                                          8     1      7     250
                                              0 COMRAM     8     1      7
 ---------------------------------------------------------------------------------
 (1) _changeMode                                           0     0      0    1917
                              _debug
 ---------------------------------------------------------------------------------
 (4) _debug                                                8     6      2    1917
                                              6 COMRAM     8     6      2
                              _delay
                             _strlen
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (5) _uart_send_byte                                       1     1      0     525
                                              5 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                5     3      2     503
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _changeMode
     _debug
       _delay
       _strlen
       _uart_send_byte
         _delay
   _delay
   _eusart_init
   _processSerialData
     _debug
       _delay
       _strlen
       _uart_send_byte
         _delay
     _delay
     _uart_recv_byte
   _state_machine
     _getPWMvalue
       _debug
         _delay
         _strlen
         _uart_send_byte
           _delay
       _delay
       _memcpy
       _processSerialData
         _debug
           _delay
           _strlen
           _uart_send_byte
             _delay
         _delay
         _uart_recv_byte
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1A      31       1       51.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      31       3        0.0%
DATA                 0      0      31      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jul 24 23:41:21 2017

                        l91 0948                          _ch 002F                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
               __CFG_LVP$ON 000000                         l141 08DA                         l154 0964  
                       l148 094E                         l623 07BC                         l633 0894  
              __CFG_CPB$OFF 000000                         u430 07F4                         _PR2 000FCB  
                       u450 05F0                __CFG_CPD$OFF 000000                         u437 07EA  
                       u457 05E6                         u590 0560                         _ch2 001F  
                       _ptr 001D                __CFG_BORV$45 000000                         wreg 000FE8  
              __CFG_IESO$ON 000000                  Load_Base@i 0024                        l1204 07B2  
                      l1220 088A                        l1212 086A                        l1300 03A6  
                      l1150 0912                        l1230 04E2                        l1214 0872  
                      l1152 0916                        l1240 0508                        l1216 0876  
                      l1400 092E                        l1162 07D0                        l1242 0510  
                      l1234 04F2                        l1330 0428                        l1306 03D0  
                      l1164 07D4                        l1316 03F8                        l1404 0934  
                      l1182 0604                        l1270 057E                        l1318 03FC  
                      l1406 093E                        l1176 05C4                        l1272 0582  
                      l1256 053A                        l1264 0550                        l1192 078A  
                      l1344 049C                        l1336 0444                        l1416 06F8  
                      l1282 082A                        l1290 084A                        l1194 0792  
                      l1338 044A                        l1346 04A4                        l1196 0796  
                      l1348 04BC                        l1294 038C                        l1376 0646  
                      l1368 08EE                        l1386 0670                        l1396 069A  
                      STR_1 030B                        STR_2 036D                        STR_3 030B  
                      STR_4 0338                        STR_5 034B                        STR_6 0322  
                      STR_7 035D                        STR_8 037B                        _RCIF 007CF5  
     eusart_init@usart_mode 0008                        _TXIF 007CF4               __CFG_FCMEN$ON 000000  
             _state_machine 092C                        _main 06A0                        fsr0h 000FEA  
                      indf0 000FEF                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr2l 000FD9                        prodh 000FF4  
                      prodl 000FF3                        start 0000             eusart_init@baud 0006  
           eusart_init@fosc 0002            ??_uart_recv_byte 0001               __CFG_MCLRE$ON 000000  
              ___param_bank 000000            ??_uart_send_byte 0006                       ?_main 0001  
                     _BRG16 007D53                       _T2CON 000FCA             __end_of___lwdiv 07C6  
           __end_of___lwmod 089E                       _RCREG 000FAE                       _RCSTA 000FAB  
                     _SPBRG 000FAF                       _PTMRH 000F7C                       _PTMRL 000F7D  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TXREG 000FAD                       _TXSTA 000FAC  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000  
                     _debug 0596                       _delay 0900             __end_of_dpowers 030B  
              ?_eusart_init 0001                       _state 0021              __CFG_BOREN$OFF 000000  
                     tablat 000FF5              ?_state_machine 0001                       status 000FD8  
           __end_of_sprintf 04CA             __initialization 089E              __CFG_HPOL$HIGH 000000  
              __end_of_main 0712        __size_of_getPWMvalue 0062              __CFG_OSC$IRCIO 000000  
            __CFG_LPOL$HIGH 000000                      ??_main 001B               __activetblptr 000002  
                    ?_debug 0007                      ?_delay 0001                      _CCPR2L 000FBB  
            __CFG_WDTEN$OFF 000000                      _OSCCON 000FD3                      _PTCON0 000F7F  
                    _PTCON1 000F7E              __CFG_WINEN$OFF 000000                      _PTPERH 000F7A  
                    _PTPERL 000F7B                      _TRISC6 007CA6                      _TRISC7 007CA7  
            __CFG_SSPMX$RC7 000000              __CFG_STVREN$ON 000000                   ??___lwdiv 0005  
                 ??___lwmod 000C                      debug@i 000D                      _memcpy 0818  
                    delay@i 0004                      clear_0 08C2                      _strlen 07C6  
              __pdataCOMRAM 002F                __mediumconst 0000                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                   ??_sprintf 0013  
           ??_state_machine 001B                  __accesstop 0060     __end_of__initialization 08C8  
           __CFG_FLTAMX$RC1 000000               ___rparam_used 000001             __CFG_T1OSCMX$ON 000000  
            __pcstackCOMRAM 0001               __end_of_debug 062C               __end_of_delay 092C  
                   ??_debug 0009                     ??_delay 0003                  _changeMode 062C  
      __size_of_eusart_init 002E             __CFG_WDPS$32768 000000                     _CCP2CON 000FBA  
                   ?_memcpy 0001                     _BAUDCTL 000FAA                     ?_strlen 0001  
           __CFG_PWM4MX$RB5 000000          Load_Base@direction 0031                     _PWMCON0 000F6F  
           __CFG_PWMPIN$OFF 000000             __CFG_PWRTEN$OFF 000000                     __Hparam 0000  
                   __Lparam 0000                     ___lwdiv 0774                     ___lwmod 085C  
              __psmallconst 0300                     __pcinit 089E             __size_of_memcpy 0044  
                   __ramtop 0300                     __ptext0 06A0                     __ptext1 092C  
                   __ptext2 0712                     __ptext3 0382                     __ptext4 085C  
                   __ptext5 0774                     __ptext6 04CA                     __ptext7 0964  
                   __ptext8 0818                     __ptext9 08D2             __size_of_strlen 0052  
                   _dpowers 0301                  delay@count 0001                     _recvIdx 001B  
                   _sprintf 0382        end_of_initialization 08C8                 ?_changeMode 0001  
                   memcpy@d 0007                     memcpy@n 0005                     memcpy@s 0009  
             __Lmediumconst 0000               ??_getPWMvalue 001B                  _uartBuffer 0025  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
                   strlen@s 0001                   _PORTAbits 000F80     __size_of_uart_recv_byte 000C  
   __size_of_uart_send_byte 0018          eusart_init@tx_mode 0001            __CFG_EXCLKMX$RC3 000000  
       __end_of_getPWMvalue 0774               __pidataCOMRAM 0970         __size_of_changeMode 0074  
            __end_of_memcpy 085C              __end_of_strlen 0818         start_initialization 089E  
        uart_recv_byte@flag 0001       __end_of_state_machine 094C              Load_Base@value 0030  
                  ??_memcpy 0007                    ??_strlen 0003                 __pbssCOMRAM 001B  
             ??_eusart_init 0008                 sprintf@flag 0016                 sprintf@prec 0017  
         _processSerialData 04CA            ___lwdiv@dividend 0001                 _getPWMvalue 0712  
        ?_processSerialData 0001                    ?___lwdiv 0001                    ?___lwmod 0008  
       ??_processSerialData 000F              _uart_recv_byte 0964                 __smallconst 0300  
            _uart_send_byte 094C                   _currState 0023            ___lwdiv@quotient 0005  
            __size_of_debug 0096              __size_of_delay 002C                    ?_sprintf 000D  
              ??_changeMode 000F   __end_of_processSerialData 0596         __end_of_eusart_init 0900  
                 _prevState 0022      __end_of_uart_recv_byte 0970      __end_of_uart_send_byte 0964  
        __end_of_changeMode 06A0          uart_send_byte@byte 0006                    __Hrparam 0000  
                 memcpy@tmp 000B                    __Lrparam 0000             ?_uart_recv_byte 0001  
          __size_of___lwdiv 0052            __size_of___lwmod 0042             ?_uart_send_byte 0001  
                sprintf@val 0018             ___lwdiv@divisor 0003             ___lwdiv@counter 0007  
                  __ptext10 062C                    __ptext11 0596                    __ptext12 094C  
                  __ptext13 0900                    __ptext14 07C6                 _eusart_init 08D2  
          __size_of_sprintf 0148                    debug@len 000B  __size_of_processSerialData 00CC  
                  debug@str 0007               __size_of_main 0072                _testPWMValue 002D  
                  memcpy@d1 0001                    memcpy@s1 0003                   sprintf@ap 0014  
                 sprintf@sp 000D            ___lwmod@dividend 0008                ?_getPWMvalue 0001  
    __size_of_state_machine 0020                    sprintf@c 001A                    sprintf@f 000F  
           ___lwmod@divisor 000A           state_machine@flag 0020                    strlen@cp 0005  
           ___lwmod@counter 000C  
